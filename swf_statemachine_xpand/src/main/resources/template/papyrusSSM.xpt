«IMPORT uml»

«EXTENSION utility»
«EXTENSION org::fornax::cartridges::uml2::javabasic::m2t::Helper»
«EXTENSION templates::extensions::SwfStatemachineExtensions»

«DEFINE Root FOR uml::Model»
	«EXPAND Root FOREACH (List[uml::Package])ownedElement»
«ENDDEFINE»

/**
* Creates all packages
*/
«DEFINE Root FOR uml::Package»
	«EXPAND Root FOREACH ownedType.typeSelect(uml::StateMachine)»
	«EXPAND Root FOREACH nestedPackage»
«ENDDEFINE»

«DEFINE Root FOR uml::PackageImport»
«ENDDEFINE»

«DEFINE Root FOR uml::ProfileApplication»
«ENDDEFINE»

«DEFINE Root FOR uml::StateMachine»
	«EXPAND BuildStateMachine»
	«EXPAND ActionContainer»
	«EXPAND GuardContainer»
	«EXPAND ControlObjectLocator»
«ENDDEFINE»

«DEFINE BuildStateMachine FOR uml::StateMachine»
	«FILE getFQNPackagePath() + "/configuration/" + this.name + "Configuration.java"»
		package «getFQNPackageName()».configuration;

		import org.salgar.statemachine.domain.ControlObject;
		import org.salgar.swf_statemachine.«removeSM(this.name).toLowerCase()».controlobject.Abstract«removeSM(this.name)»ControlObject;
		import «getFQNPackageName()».enumeration.event.«this.name»_EventEnumerationImpl;
		import «getFQNPackageName()».enumeration.state.«this.name»_StateEnumerationImpl;

		import org.springframework.beans.factory.annotation.Autowired;
		import org.springframework.context.annotation.Configuration;
		import org.springframework.context.annotation.Bean;
		import org.springframework.messaging.Message;
		import org.springframework.statemachine.config.EnableStateMachineFactory;
		import org.springframework.statemachine.config.EnumStateMachineConfigurerAdapter;
		import org.springframework.statemachine.config.builders.StateMachineConfigurationConfigurer;
		import org.springframework.statemachine.config.builders.StateMachineTransitionConfigurer;
		import org.springframework.statemachine.config.builders.StateMachineStateConfigurer;
		import org.springframework.statemachine.StateContext;
		import org.springframework.statemachine.action.Action;
		import org.springframework.statemachine.listener.StateMachineListener;
		import org.springframework.statemachine.listener.StateMachineListenerAdapter;
		import org.springframework.statemachine.state.State;

		import java.util.EnumSet;

		import org.apache.log4j.Logger;

		@Configuration
		@EnableStateMachineFactory(name="«this.name»")
		public class «this.name»Configuration extends EnumStateMachineConfigurerAdapter<«this.name»_StateEnumerationImpl, «this.name»_EventEnumerationImpl> {
			private static final Logger LOG = Logger.getLogger(«this.name»Configuration.class);

			@Autowired
			private «this.name»ActionContainer «this.name.toFirstLower()»ActionContainer;

			@Autowired
			private «this.name»GuardContainer «this.name.toFirstLower()»GuardContainer;

			@Autowired
			private «this.name»ControlObjectLocator controlObjectLocator;

			@Override
			public void configure(StateMachineConfigurationConfigurer<«this.name»_StateEnumerationImpl, «this.name»_EventEnumerationImpl>config)
					throws Exception {
				config
					.withConfiguration()
						.listener(listener());
			}

			@Override
			public void configure(StateMachineStateConfigurer<«this.name»_StateEnumerationImpl, «this.name»_EventEnumerationImpl> states) throws Exception {
				states.withStates().initial(«this.name»_StateEnumerationImpl.«findIntialState(this.allOwnedElements().typeSelect(uml::Pseudostate)).name», initialState«this.name»Action())
						.states(EnumSet.allOf(«this.name»_StateEnumerationImpl.class));
			}

			@Override
			public void configure(StateMachineTransitionConfigurer<«this.name»_StateEnumerationImpl, «this.name»_EventEnumerationImpl> transitions) throws Exception {
				transitions
				«FOREACH this.allOwnedElements().typeSelect(uml::State).getOutgoings() AS transition SEPARATOR '.and()'»
					//STATE - «transition.source.name»
					.withExternal()
					.source(«this.name»_StateEnumerationImpl.«transition.source.name»)
					.target(«this.name»_StateEnumerationImpl.«transition.target.name»)
						.event(«this.name»_EventEnumerationImpl.«transition.trigger.first().name»)
						«IF transition.guard != null»
								.guard(«this.name.toFirstLower()»GuardContainer.get«transition.source.name»___«transition.target.name»_«transition.name»_«transition.guard.name»_guard().«transition.source.name»_«transition.target.name»_«transition.name»_«transition.guard.name»_guard())
								«EXPAND GuardImpl(transition)»
						«ENDIF»
						«IF transition.effect != null»
							.action(«this.name.toFirstLower()»ActionContainer.get«transition.source.name»___«transition.target.name»_«transition.name»_«transition.effect.name»_action().«transition.source.name»_«transition.target.name»_«transition.name»_«transition.effect.name»_action())
							«EXPAND ActionImpl(transition)»
						«ENDIF»
				«ENDFOREACH»;
			}

			public StateMachineListener<«this.name»_StateEnumerationImpl, «this.name»_EventEnumerationImpl> listener() {
                return new StateMachineListenerAdapter<«this.name»_StateEnumerationImpl, «this.name»_EventEnumerationImpl>() {
                    @Override
                    public void stateChanged(State<«this.name»_StateEnumerationImpl, «this.name»_EventEnumerationImpl> from, State<«this.name»_StateEnumerationImpl, «this.name»_EventEnumerationImpl> to) {
                        LOG.info("State change to " + to.getId());
                    }

                    @Override
                    public void eventNotAccepted(Message<«this.name»_EventEnumerationImpl> event) {
                        LOG.warn("The event " + event.toString() + " is not accepted!" );
                    }
                };
            }

            @Bean
            public Action<«this.name»_StateEnumerationImpl, «this.name»_EventEnumerationImpl> initialState«this.name»Action() {
                return new Action<«this.name»_StateEnumerationImpl, «this.name»_EventEnumerationImpl>() {
                    @Override
                    public void execute(StateContext<«this.name»_StateEnumerationImpl, «this.name»_EventEnumerationImpl> context) {
                        Abstract«removeSM(this.name)»ControlObject controlObject = controlObjectLocator.getControlObject();
                        ((ControlObject)controlObject).resetStateMachine();
                        context.getExtendedState().getVariables().put("«this.name»ControlObject", controlObject);
                    }
                };
            }
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE GuardImpl(uml::Transition transition) FOR uml::StateMachine»
    «FILE getFQNPackagePath() + "/configuration/" + transition.source.name.toLowerCase() + "/guard/" +  transition.source.name + "___" + transition.target.name + "_" + transition.name + "_" + transition.guard.name + "_guard" + ".java"»
        package «getFQNPackageName()».configuration.«transition.source.name.toLowerCase()».guard;

        import «getFQNPackageName()».enumeration.event.«this.name»_EventEnumerationImpl;
        import «getFQNPackageName()».enumeration.state.«this.name»_StateEnumerationImpl;

        import org.springframework.beans.factory.annotation.Autowired;
        import org.springframework.context.annotation.Configuration;
        import org.springframework.context.annotation.Bean;
        import org.springframework.statemachine.StateContext;
        import org.springframework.statemachine.guard.Guard;


        @Configuration
        public class «transition.source.name»___«transition.target.name»_«transition.name»_«transition.guard.name»_guard {
            @Autowired(required = false)
            private I«transition.source.name»_«transition.target.name»_«transition.name»_«transition.guard.name»Guard realImplementation;

            @Bean
            public Guard<«this.name»_StateEnumerationImpl, «this.name»_EventEnumerationImpl> «transition.source.name»_«transition.target.name»_«transition.name»_«transition.guard.name»_guard() {
                return new Guard<«this.name»_StateEnumerationImpl, «this.name»_EventEnumerationImpl>() {

                    @Override
                    public boolean evaluate(StateContext<«this.name»_StateEnumerationImpl, «this.name»_EventEnumerationImpl> context) {
                        if(realImplementation != null) {
                            return realImplementation.evaluate(context);
                        }
                        return false;
                    }
                };
            }
            public interface I«transition.source.name»_«transition.target.name»_«transition.name»_«transition.guard.name»Guard {
                boolean evaluate(StateContext<«this.name»_StateEnumerationImpl, «this.name»_EventEnumerationImpl> context);
            }
        }
    «ENDFILE»
«ENDDEFINE»

«DEFINE ActionImpl(uml::Transition transition) FOR uml::StateMachine»
    «FILE getFQNPackagePath() +"/configuration/" + transition.source.name.toLowerCase() + "/action/" +  transition.source.name + "___" + transition.target.name + "_" + transition.name + "_" + transition.effect.name + "_action" + ".java"»
        package «getFQNPackageName()».configuration.«transition.source.name.toLowerCase()».action;

        import «getFQNPackageName()».enumeration.event.«this.name»_EventEnumerationImpl;
        import «getFQNPackageName()».enumeration.state.«this.name»_StateEnumerationImpl;

        import org.springframework.beans.factory.annotation.Autowired;
        import org.springframework.context.annotation.Configuration;
        import org.springframework.context.annotation.Bean;
        import org.springframework.statemachine.StateContext;
        import org.springframework.statemachine.action.Action;

        import org.apache.log4j.Logger;

        @Configuration
        public class «transition.source.name»___«transition.target.name»_«transition.name»_«transition.effect.name»_action {
            private static final Logger LOG = Logger.getLogger(«transition.source.name»___«transition.target.name»_«transition.name»_«transition.effect.name»_action.class);

            @Autowired(required = false)
            private I«transition.source.name»_«transition.target.name»_«transition.name»_«transition.effect.name»Action realImplementation;

            @Bean
            public Action<«this.name»_StateEnumerationImpl, «this.name»_EventEnumerationImpl> «transition.source.name»_«transition.target.name»_«transition.name»_«transition.effect.name»_action() {
                return new Action<«this.name»_StateEnumerationImpl, «this.name»_EventEnumerationImpl>() {

                    @Override
                    public void execute(StateContext<«this.name»_StateEnumerationImpl, «this.name»_EventEnumerationImpl> context) {
                        if (realImplementation != null) {
                            realImplementation.execute(context);
                        } else {
                            LOG.warn("In the UML Model for this Action the Steorotype defines an implementation but Spring could not find a concrete implementation class!");
                        }
                    }
                };
            }
            public interface I«transition.source.name»_«transition.target.name»_«transition.name»_«transition.effect.name»Action {
                void execute(StateContext<«this.name»_StateEnumerationImpl, «this.name»_EventEnumerationImpl> context);
            }
        }
    «ENDFILE»
«ENDDEFINE»

«DEFINE ActionContainer FOR uml::StateMachine»
    «FILE getFQNPackagePath() + "/configuration/" +  this.name + "ActionContainer.java"»
        package «getFQNPackageName()».configuration;

        import org.springframework.beans.factory.annotation.Autowired;
        import org.springframework.context.annotation.Configuration;

        @Configuration
        public class «this.name»ActionContainer {
            «FOREACH this.allOwnedElements().typeSelect(uml::State) AS state»
                «FOREACH state.getOutgoings() AS transition»
                	«IF transition.effect != null»
						@Autowired
						private «getFQNPackageName()».configuration.«state.name.toLowerCase()».action.«transition.source.name»___«transition.target.name»_«transition.name»_«transition.effect.name»_action «transition.source.name.toLowerCase()»___«transition.target.name»_«transition.name»_«transition.effect.name»_action;

						public «getFQNPackageName()».configuration.«state.name.toLowerCase()».action.«transition.source.name»___«transition.target.name»_«transition.name»_«transition.effect.name»_action get«transition.source.name»___«transition.target.name»_«transition.name»_«transition.effect.name»_action() {
							return «transition.source.name.toLowerCase()»___«transition.target.name»_«transition.name»_«transition.effect.name»_action;
						}
					«ENDIF»
                «ENDFOREACH»
            «ENDFOREACH»
        }
    «ENDFILE»
«ENDDEFINE»

«DEFINE GuardContainer FOR uml::StateMachine»
    «FILE getFQNPackagePath() + "/configuration/" +  this.name + "GuardContainer.java"»
        package «getFQNPackageName()».configuration;

        import org.springframework.beans.factory.annotation.Autowired;
        import org.springframework.context.annotation.Configuration;

        @Configuration
        public class «this.name»GuardContainer {
            «FOREACH this.allOwnedElements().typeSelect(uml::State) AS state»
                «FOREACH state.getOutgoings() AS transition»
                	«IF transition.guard != null»
						@Autowired
						private «getFQNPackageName()».configuration.«state.name.toLowerCase()».guard.«transition.source.name»___«transition.target.name»_«transition.name»_«transition.guard.name»_guard «transition.source.name.toLowerCase()»___«transition.target.name»_«transition.name»_«transition.guard.name»_guard;

						public «getFQNPackageName()».configuration.«state.name.toLowerCase()».guard.«transition.source.name»___«transition.target.name»_«transition.name»_«transition.guard.name»_guard get«transition.source.name»___«transition.target.name»_«transition.name»_«transition.guard.name»_guard() {
							return «transition.source.name.toLowerCase()»___«transition.target.name»_«transition.name»_«transition.guard.name»_guard;
						}
					«ENDIF»
                «ENDFOREACH»
            «ENDFOREACH»
        }
    «ENDFILE»
«ENDDEFINE»

«DEFINE ControlObjectLocator FOR uml::StateMachine»
    «FILE getFQNPackagePath() + "/configuration/" + this.name + "ControlObjectLocator.java"»
        package «getFQNPackageName()».configuration;

        import org.salgar.swf_statemachine.«removeSM(this.name).toLowerCase()».controlobject.Abstract«removeSM(this.name)»ControlObject;
        import org.springframework.beans.factory.annotation.Lookup;
        import org.springframework.stereotype.Component;

        @Component
        public class «this.name»ControlObjectLocator {

            @Lookup
            public Abstract«removeSM(this.name)»ControlObject getControlObject() {
                return null;
            }
        }
    «ENDFILE»
«ENDDEFINE»