«IMPORT uml»

«EXTENSION utility»
«EXTENSION org::fornax::cartridges::uml2::javabasic::m2t::Helper»

«DEFINE Root FOR uml::Model»
	«EXPAND BuildStateMachineEnumeration»
	«EXPAND Root FOREACH (List[uml::Package])ownedElement»
«ENDDEFINE»

«DEFINE BuildStateMachineEnumeration FOR uml::Model»
	«FILE "org/salgar/" + this.name.toLowerCase() + "/enumeration/StateMachineEnumerationImpl.java"»
			package org.salgar.«this.name.toLowerCase()».enumeration;

			import org.salgar.statemachine.domain.StateMachineEnumeration;

			public enum StateMachineEnumerationImpl implements
			StateMachineEnumeration {
			«FOREACH allOwnedElements().typeSelect(uml::StateMachine) AS stateMachine SEPARATOR ','»
				«stateMachine.name»("«stateMachine.name»")
			«ENDFOREACH»;

			private String name;

			StateMachineEnumerationImpl(String name) {
				this.name = name;
			}

			public String getStateMachineName() {
				return this.name;
			}

			@Override
			public String toString() {
				return this.name;
			}
		 }
	«ENDFILE»

«ENDDEFINE»

«DEFINE Root FOR uml::Package»
	«EXPAND Root FOREACH ownedType.typeSelect(uml::StateMachine)»
	«EXPAND Root FOREACH nestedPackage»
«ENDDEFINE»

«DEFINE Root FOR uml::PackageImport»
«ENDDEFINE»

«DEFINE Root FOR uml::ProfileApplication»
«ENDDEFINE»

«DEFINE Root FOR uml::StateMachine»
	«EXPAND StateEnumeration»
    «EXPAND EventEnumeration»
«ENDDEFINE»

«DEFINE StateEnumeration FOR uml::StateMachine»
	«FILE getFQNPackagePath() + "/enumeration/state/" + this.name + "_StateEnumerationImpl.java"»
		package «getFQNPackageName()».enumeration.state;
		
		import org.salgar.statemachine.domain.StateEnumeration;
		import org.salgar.statemachine.domain.StateMachineEnumeration;
		import org.salgar.«giveModel(this).name.toLowerCase()».enumeration.StateMachineEnumerationImpl;
				
		public enum «this.name»_StateEnumerationImpl implements StateEnumeration {
		«FOREACH this.allOwnedElements().typeSelect(uml::State) AS state SEPARATOR ','»
			«state.name»("«state.name.toLowerCase()»", StateMachineEnumerationImpl.«this.name»)
		«ENDFOREACH»;		
	
		private String stateName;
		private StateMachineEnumeration stateMachineEnumeration;
	
		«this.name»_StateEnumerationImpl(String stateName,
				StateMachineEnumeration stateMachineEnumeration) {
			this.stateName = stateName;
			this.stateMachineEnumeration = stateMachineEnumeration;
		}
	
		public String getStateName() {
			return this.stateName;
		}
	
		public StateMachineEnumeration getStateMachineName() {
			return this.stateMachineEnumeration;
		}
	
		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder();
			sb.append("stateName: ");
			sb.append(this.stateName);
			sb.append(" stateMachine: ");
			sb.append(this.stateMachineEnumeration.getStateMachineName());
	
			return sb.toString();
		}
	}
	«ENDFILE»
«ENDDEFINE»

«DEFINE SubStateMachineStateEnumeration(uml::StateMachine sm, uml::StateMachine sub_sm) FOR uml::StateMachine»
	«FOREACH sub_sm.allOwnedElements().typeSelect(uml::State) AS state SEPARATOR ','»
			«state.name»("«state.name.toLowerCase()»", StateMachineEnumerationImpl.«this.name»)
			«IF state.submachine != null»
				«EXPAND SubStateMachineStateEnumeration(sm, state.submachine)»
			«ENDIF»
		«ENDFOREACH»
«ENDDEFINE»

«DEFINE SubStateMachineEventEnumeration(uml::StateMachine sm, uml::StateMachine sub_sm) FOR uml::StateMachine»
	 «FOREACH giveTransitionWithTrigger(sub_sm.allOwnedElements().typeSelect(uml::Transition)) AS trigger SEPARATOR ','»
			«trigger.name»("«trigger.name.toLowerCase()»", StateMachineEnumerationImpl.«sm.name»)
			«IF state.submachine != null»
				«EXPAND SubStateMachineEventEnumeration(sm, state.submachine)»
			«ENDIF»
		«ENDFOREACH»
«ENDDEFINE»

«DEFINE EventEnumeration FOR uml::StateMachine»
	«FILE getFQNPackagePath() + "/enumeration/event/" + this.name +"_EventEnumerationImpl.java"»
		package «getFQNPackageName()».enumeration.event;

		import org.salgar.statemachine.domain.EventEnumeration;
		import org.salgar.statemachine.domain.StateMachineEnumeration;
		import org.salgar.«giveModel(this).name.toLowerCase()».enumeration.StateMachineEnumerationImpl;
		
		public enum «this.name»_EventEnumerationImpl implements EventEnumeration {
			«FOREACH giveTransitionWithTrigger(this.allOwnedElements().typeSelect(uml::Transition)) AS trigger SEPARATOR ','»
				«trigger.name»("«trigger.name.toLowerCase()»", StateMachineEnumerationImpl.«this.name»)
			«ENDFOREACH»
			«FOREACH this.allOwnedElements().typeSelect(uml::State) AS state SEPARATOR ','»
				«IF state.submachine != null»
					,«EXPAND SubStateMachineEventEnumeration(this, state.submachine)»
				«ENDIF»
			«ENDFOREACH»;
			
			private String eventName;
			private StateMachineEnumeration stateMachineEnumeration;
		
			«this.name»_EventEnumerationImpl(String eventName,
					StateMachineEnumeration stateMachineEnumeration) {
				this.eventName = eventName;
				this.stateMachineEnumeration = stateMachineEnumeration;
			}
		
			public StateMachineEnumeration getStatemachineName() {
				return this.stateMachineEnumeration;
			}
		
			public String getEventName() {
				return this.eventName;
			}
		
			@Override
			public String toString() {
				StringBuilder sb = new StringBuilder();
				sb.append("eventName: ");
				sb.append(this.eventName);
				sb.append(" stateMachine: ");
				sb.append(this.stateMachineEnumeration.getStateMachineName());
				return sb.toString();
			}
		}
	«ENDFILE»
«ENDDEFINE»