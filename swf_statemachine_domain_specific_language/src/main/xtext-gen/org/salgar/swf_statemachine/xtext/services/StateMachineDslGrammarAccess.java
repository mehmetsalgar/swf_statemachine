/*
 * generated by Xtext 2.9.1
 */
package org.salgar.swf_statemachine.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class StateMachineDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.salgar.swf_statemachine.xtext.StateMachineDsl.Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsBaseParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Model:
		//	elements+=Base*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Base*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Base
		public RuleCall getElementsBaseParserRuleCall_0() { return cElementsBaseParserRuleCall_0; }
	}
	public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.salgar.swf_statemachine.xtext.StateMachineDsl.PackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsBaseParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PackageDeclaration:
		//	'package' name=QualifiedName '{'
		//	elements+=Base*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=QualifiedName '{' elements+=Base* '}'
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//elements+=Base*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//Base
		public RuleCall getElementsBaseParserRuleCall_3_0() { return cElementsBaseParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class StateMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.salgar.swf_statemachine.xtext.StateMachineDsl.StateMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatemachineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cInitialStateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInitialStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cInitialStateStateCrossReference_3_0 = (CrossReference)cInitialStateAssignment_3.eContents().get(0);
		private final RuleCall cInitialStateStateIDTerminalRuleCall_3_0_1 = (RuleCall)cInitialStateStateCrossReference_3_0.eContents().get(1);
		private final Keyword cControlObjectKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cControlObjectAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cControlObjectControlObjectParserRuleCall_5_0 = (RuleCall)cControlObjectAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEventsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cEventsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cEventsEventParserRuleCall_6_1_1_0 = (RuleCall)cEventsAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_1_2 = (Keyword)cGroup_6_1.eContents().get(2);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cStatesKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cStatesAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cStatesStateParserRuleCall_7_1_1_0 = (RuleCall)cStatesAssignment_7_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_1_2 = (Keyword)cGroup_7_1.eContents().get(2);
		
		//StateMachine:
		//	'statemachine' name=ID 'initialState' initialState=[State]
		//	'control-object' controlObject=ControlObject ('events' ('{'
		//	events+=Event*
		//	'}')) ('states' ('{'
		//	states+=State*
		//	'}'));
		@Override public ParserRule getRule() { return rule; }
		
		//'statemachine' name=ID 'initialState' initialState=[State] 'control-object' controlObject=ControlObject ('events' ('{'
		//events+=Event* '}')) ('states' ('{' states+=State* '}'))
		public Group getGroup() { return cGroup; }
		
		//'statemachine'
		public Keyword getStatemachineKeyword_0() { return cStatemachineKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'initialState'
		public Keyword getInitialStateKeyword_2() { return cInitialStateKeyword_2; }
		
		//initialState=[State]
		public Assignment getInitialStateAssignment_3() { return cInitialStateAssignment_3; }
		
		//[State]
		public CrossReference getInitialStateStateCrossReference_3_0() { return cInitialStateStateCrossReference_3_0; }
		
		//ID
		public RuleCall getInitialStateStateIDTerminalRuleCall_3_0_1() { return cInitialStateStateIDTerminalRuleCall_3_0_1; }
		
		//'control-object'
		public Keyword getControlObjectKeyword_4() { return cControlObjectKeyword_4; }
		
		//controlObject=ControlObject
		public Assignment getControlObjectAssignment_5() { return cControlObjectAssignment_5; }
		
		//ControlObject
		public RuleCall getControlObjectControlObjectParserRuleCall_5_0() { return cControlObjectControlObjectParserRuleCall_5_0; }
		
		//'events' ('{' events+=Event* '}')
		public Group getGroup_6() { return cGroup_6; }
		
		//'events'
		public Keyword getEventsKeyword_6_0() { return cEventsKeyword_6_0; }
		
		//'{' events+=Event* '}'
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1_0() { return cLeftCurlyBracketKeyword_6_1_0; }
		
		//events+=Event*
		public Assignment getEventsAssignment_6_1_1() { return cEventsAssignment_6_1_1; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_6_1_1_0() { return cEventsEventParserRuleCall_6_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_1_2() { return cRightCurlyBracketKeyword_6_1_2; }
		
		//'states' ('{' states+=State* '}')
		public Group getGroup_7() { return cGroup_7; }
		
		//'states'
		public Keyword getStatesKeyword_7_0() { return cStatesKeyword_7_0; }
		
		//'{' states+=State* '}'
		public Group getGroup_7_1() { return cGroup_7_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1_0() { return cLeftCurlyBracketKeyword_7_1_0; }
		
		//states+=State*
		public Assignment getStatesAssignment_7_1_1() { return cStatesAssignment_7_1_1; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_7_1_1_0() { return cStatesStateParserRuleCall_7_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_1_2() { return cRightCurlyBracketKeyword_7_1_2; }
	}
	public class BaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.salgar.swf_statemachine.xtext.StateMachineDsl.Base");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPackageDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStateMachineParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Base:
		//	PackageDeclaration | StateMachine;
		@Override public ParserRule getRule() { return rule; }
		
		//PackageDeclaration | StateMachine
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PackageDeclaration
		public RuleCall getPackageDeclarationParserRuleCall_0() { return cPackageDeclarationParserRuleCall_0; }
		
		//StateMachine
		public RuleCall getStateMachineParserRuleCall_1() { return cStateMachineParserRuleCall_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.salgar.swf_statemachine.xtext.StateMachineDsl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.salgar.swf_statemachine.xtext.StateMachineDsl.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTransitionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTransitionsTransitionParserRuleCall_3_0 = (RuleCall)cTransitionsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//State:
		//	'state' name=ID
		//	'{'
		//	transitions+=Transition*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'state' name=ID '{' transitions+=Transition* '}'
		public Group getGroup() { return cGroup; }
		
		//'state'
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//transitions+=Transition*
		public Assignment getTransitionsAssignment_3() { return cTransitionsAssignment_3; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_3_0() { return cTransitionsTransitionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.salgar.swf_statemachine.xtext.StateMachineDsl.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetStateCrossReference_3_0 = (CrossReference)cTargetAssignment_3.eContents().get(0);
		private final RuleCall cTargetStateIDTerminalRuleCall_3_0_1 = (RuleCall)cTargetStateCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cTriggerKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cTriggerAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final CrossReference cTriggerEventCrossReference_5_2_0 = (CrossReference)cTriggerAssignment_5_2.eContents().get(0);
		private final RuleCall cTriggerEventIDTerminalRuleCall_5_2_0_1 = (RuleCall)cTriggerEventCrossReference_5_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cGuardKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cGuardAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cGuardGuardParserRuleCall_6_2_0 = (RuleCall)cGuardAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cActionKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cActionAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cActionActionParserRuleCall_7_2_0 = (RuleCall)cActionAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Transition:
		//	'transition' name=ID
		//	'=>' target=[State]
		//	'{' ('trigger' '{' trigger=[Event] '}') ('guard' '{' guard=Guard '}')? ('action' '{' action=Action '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'transition' name=ID '=>' target=[State] '{' ('trigger' '{' trigger=[Event] '}') ('guard' '{' guard=Guard '}')?
		//('action' '{' action=Action '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//'transition'
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_2() { return cEqualsSignGreaterThanSignKeyword_2; }
		
		//target=[State]
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }
		
		//[State]
		public CrossReference getTargetStateCrossReference_3_0() { return cTargetStateCrossReference_3_0; }
		
		//ID
		public RuleCall getTargetStateIDTerminalRuleCall_3_0_1() { return cTargetStateIDTerminalRuleCall_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//'trigger' '{' trigger=[Event] '}'
		public Group getGroup_5() { return cGroup_5; }
		
		//'trigger'
		public Keyword getTriggerKeyword_5_0() { return cTriggerKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//trigger=[Event]
		public Assignment getTriggerAssignment_5_2() { return cTriggerAssignment_5_2; }
		
		//[Event]
		public CrossReference getTriggerEventCrossReference_5_2_0() { return cTriggerEventCrossReference_5_2_0; }
		
		//ID
		public RuleCall getTriggerEventIDTerminalRuleCall_5_2_0_1() { return cTriggerEventIDTerminalRuleCall_5_2_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
		
		//('guard' '{' guard=Guard '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'guard'
		public Keyword getGuardKeyword_6_0() { return cGuardKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//guard=Guard
		public Assignment getGuardAssignment_6_2() { return cGuardAssignment_6_2; }
		
		//Guard
		public RuleCall getGuardGuardParserRuleCall_6_2_0() { return cGuardGuardParserRuleCall_6_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }
		
		//('action' '{' action=Action '}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'action'
		public Keyword getActionKeyword_7_0() { return cActionKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//action=Action
		public Assignment getActionAssignment_7_2() { return cActionAssignment_7_2; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_7_2_0() { return cActionActionParserRuleCall_7_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.salgar.swf_statemachine.xtext.StateMachineDsl.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Event:
		//	'event' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'event' name=ID
		public Group getGroup() { return cGroup; }
		
		//'event'
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class GuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.salgar.swf_statemachine.xtext.StateMachineDsl.Guard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGuardAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Guard:
		//	{Guard} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{Guard} name=ID
		public Group getGroup() { return cGroup; }
		
		//{Guard}
		public Action getGuardAction_0() { return cGuardAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.salgar.swf_statemachine.xtext.StateMachineDsl.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Action:
		//	{Action} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{Action} name=ID
		public Group getGroup() { return cGroup; }
		
		//{Action}
		public Action getActionAction_0() { return cActionAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ControlObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.salgar.swf_statemachine.xtext.StateMachineDsl.ControlObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributesControlObjectAttributeParserRuleCall_1_0 = (RuleCall)cAttributesAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ControlObject:
		//	'{'
		//	attributes+=ControlObjectAttribute*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' attributes+=ControlObjectAttribute* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//attributes+=ControlObjectAttribute*
		public Assignment getAttributesAssignment_1() { return cAttributesAssignment_1; }
		
		//ControlObjectAttribute
		public RuleCall getAttributesControlObjectAttributeParserRuleCall_1_0() { return cAttributesControlObjectAttributeParserRuleCall_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class ControlObjectAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.salgar.swf_statemachine.xtext.StateMachineDsl.ControlObjectAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cTypeAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cTypeAttributeBaseParserRuleCall_2_2_0 = (RuleCall)cTypeAssignment_2_2.eContents().get(0);
		
		//ControlObjectAttribute:
		//	'attribute' name=ID ('type' '=' type=AttributeBase);
		@Override public ParserRule getRule() { return rule; }
		
		//'attribute' name=ID ('type' '=' type=AttributeBase)
		public Group getGroup() { return cGroup; }
		
		//'attribute'
		public Keyword getAttributeKeyword_0() { return cAttributeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'type' '=' type=AttributeBase
		public Group getGroup_2() { return cGroup_2; }
		
		//'type'
		public Keyword getTypeKeyword_2_0() { return cTypeKeyword_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }
		
		//type=AttributeBase
		public Assignment getTypeAssignment_2_2() { return cTypeAssignment_2_2; }
		
		//AttributeBase
		public RuleCall getTypeAttributeBaseParserRuleCall_2_2_0() { return cTypeAttributeBaseParserRuleCall_2_2_0; }
	}
	public class AttributeBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.salgar.swf_statemachine.xtext.StateMachineDsl.AttributeBase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cObjectTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AttributeBase:
		//	ObjectType | SimpleType;
		@Override public ParserRule getRule() { return rule; }
		
		//ObjectType | SimpleType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ObjectType
		public RuleCall getObjectTypeParserRuleCall_0() { return cObjectTypeParserRuleCall_0; }
		
		//SimpleType
		public RuleCall getSimpleTypeParserRuleCall_1() { return cSimpleTypeParserRuleCall_1; }
	}
	public class SimpleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.salgar.swf_statemachine.xtext.StateMachineDsl.SimpleType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeInternalTypeEnumRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//SimpleType:
		//	type=InternalType;
		@Override public ParserRule getRule() { return rule; }
		
		//type=InternalType
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//InternalType
		public RuleCall getTypeInternalTypeEnumRuleCall_0() { return cTypeInternalTypeEnumRuleCall_0; }
	}
	public class ObjectTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.salgar.swf_statemachine.xtext.StateMachineDsl.ObjectType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeSTRINGTerminalRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//ObjectType:
		//	type=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//type=STRING
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//STRING
		public RuleCall getTypeSTRINGTerminalRuleCall_0() { return cTypeSTRINGTerminalRuleCall_0; }
	}
	
	public class InternalTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.salgar.swf_statemachine.xtext.StateMachineDsl.InternalType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNONEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNONENONEKeyword_0_0 = (Keyword)cNONEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBOOLEANJavaLangBooleanKeyword_1_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINTEGEREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINTEGERJavaLangIntegerKeyword_2_0 = (Keyword)cINTEGEREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLONGEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLONGJavaLangLongKeyword_3_0 = (Keyword)cLONGEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFLOATJavaLangFloatKeyword_4_0 = (Keyword)cFLOATEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDECIMALEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDECIMALJavaLangDecimalKeyword_5_0 = (Keyword)cDECIMALEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSTRINGJavaLangStringKeyword_6_0 = (Keyword)cSTRINGEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cDATEEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cDATEJavaLangDateKeyword_7_0 = (Keyword)cDATEEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cDATETIMEEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cDATETIMEJavaLangDateTimeKeyword_8_0 = (Keyword)cDATETIMEEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cTIMEEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cTIMEJavaLangTimeKeyword_9_0 = (Keyword)cTIMEEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cLISTEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cLISTJavaUtilListKeyword_10_0 = (Keyword)cLISTEnumLiteralDeclaration_10.eContents().get(0);
		
		//enum InternalType:
		//	NONE | BOOLEAN='java.lang.Boolean' | INTEGER='java.lang.Integer' | LONG='java.lang.Long' | FLOAT='java.lang.Float' |
		//	DECIMAL='java.lang.Decimal' |
		//	STRING='java.lang.String' | DATE='java.lang.Date' | DATETIME='java.lang.DateTime' | TIME='java.lang.Time' |
		//	LIST='java.util.List';
		public EnumRule getRule() { return rule; }
		
		//NONE | BOOLEAN='java.lang.Boolean' | INTEGER='java.lang.Integer' | LONG='java.lang.Long' | FLOAT='java.lang.Float' |
		//DECIMAL='java.lang.Decimal' | STRING='java.lang.String' | DATE='java.lang.Date' | DATETIME='java.lang.DateTime' |
		//TIME='java.lang.Time' | LIST='java.util.List'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NONE
		public EnumLiteralDeclaration getNONEEnumLiteralDeclaration_0() { return cNONEEnumLiteralDeclaration_0; }
		
		//'NONE'
		public Keyword getNONENONEKeyword_0_0() { return cNONENONEKeyword_0_0; }
		
		//BOOLEAN='java.lang.Boolean'
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_1() { return cBOOLEANEnumLiteralDeclaration_1; }
		
		//'java.lang.Boolean'
		public Keyword getBOOLEANJavaLangBooleanKeyword_1_0() { return cBOOLEANJavaLangBooleanKeyword_1_0; }
		
		//INTEGER='java.lang.Integer'
		public EnumLiteralDeclaration getINTEGEREnumLiteralDeclaration_2() { return cINTEGEREnumLiteralDeclaration_2; }
		
		//'java.lang.Integer'
		public Keyword getINTEGERJavaLangIntegerKeyword_2_0() { return cINTEGERJavaLangIntegerKeyword_2_0; }
		
		//LONG='java.lang.Long'
		public EnumLiteralDeclaration getLONGEnumLiteralDeclaration_3() { return cLONGEnumLiteralDeclaration_3; }
		
		//'java.lang.Long'
		public Keyword getLONGJavaLangLongKeyword_3_0() { return cLONGJavaLangLongKeyword_3_0; }
		
		//FLOAT='java.lang.Float'
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_4() { return cFLOATEnumLiteralDeclaration_4; }
		
		//'java.lang.Float'
		public Keyword getFLOATJavaLangFloatKeyword_4_0() { return cFLOATJavaLangFloatKeyword_4_0; }
		
		//DECIMAL='java.lang.Decimal'
		public EnumLiteralDeclaration getDECIMALEnumLiteralDeclaration_5() { return cDECIMALEnumLiteralDeclaration_5; }
		
		//'java.lang.Decimal'
		public Keyword getDECIMALJavaLangDecimalKeyword_5_0() { return cDECIMALJavaLangDecimalKeyword_5_0; }
		
		//STRING='java.lang.String'
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_6() { return cSTRINGEnumLiteralDeclaration_6; }
		
		//'java.lang.String'
		public Keyword getSTRINGJavaLangStringKeyword_6_0() { return cSTRINGJavaLangStringKeyword_6_0; }
		
		//DATE='java.lang.Date'
		public EnumLiteralDeclaration getDATEEnumLiteralDeclaration_7() { return cDATEEnumLiteralDeclaration_7; }
		
		//'java.lang.Date'
		public Keyword getDATEJavaLangDateKeyword_7_0() { return cDATEJavaLangDateKeyword_7_0; }
		
		//DATETIME='java.lang.DateTime'
		public EnumLiteralDeclaration getDATETIMEEnumLiteralDeclaration_8() { return cDATETIMEEnumLiteralDeclaration_8; }
		
		//'java.lang.DateTime'
		public Keyword getDATETIMEJavaLangDateTimeKeyword_8_0() { return cDATETIMEJavaLangDateTimeKeyword_8_0; }
		
		//TIME='java.lang.Time'
		public EnumLiteralDeclaration getTIMEEnumLiteralDeclaration_9() { return cTIMEEnumLiteralDeclaration_9; }
		
		//'java.lang.Time'
		public Keyword getTIMEJavaLangTimeKeyword_9_0() { return cTIMEJavaLangTimeKeyword_9_0; }
		
		//LIST='java.util.List'
		public EnumLiteralDeclaration getLISTEnumLiteralDeclaration_10() { return cLISTEnumLiteralDeclaration_10; }
		
		//'java.util.List'
		public Keyword getLISTJavaUtilListKeyword_10_0() { return cLISTJavaUtilListKeyword_10_0; }
	}
	
	private final ModelElements pModel;
	private final PackageDeclarationElements pPackageDeclaration;
	private final StateMachineElements pStateMachine;
	private final BaseElements pBase;
	private final QualifiedNameElements pQualifiedName;
	private final StateElements pState;
	private final TransitionElements pTransition;
	private final EventElements pEvent;
	private final GuardElements pGuard;
	private final ActionElements pAction;
	private final ControlObjectElements pControlObject;
	private final ControlObjectAttributeElements pControlObjectAttribute;
	private final AttributeBaseElements pAttributeBase;
	private final SimpleTypeElements pSimpleType;
	private final ObjectTypeElements pObjectType;
	private final InternalTypeElements eInternalType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public StateMachineDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPackageDeclaration = new PackageDeclarationElements();
		this.pStateMachine = new StateMachineElements();
		this.pBase = new BaseElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pState = new StateElements();
		this.pTransition = new TransitionElements();
		this.pEvent = new EventElements();
		this.pGuard = new GuardElements();
		this.pAction = new ActionElements();
		this.pControlObject = new ControlObjectElements();
		this.pControlObjectAttribute = new ControlObjectAttributeElements();
		this.pAttributeBase = new AttributeBaseElements();
		this.pSimpleType = new SimpleTypeElements();
		this.pObjectType = new ObjectTypeElements();
		this.eInternalType = new InternalTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.salgar.swf_statemachine.xtext.StateMachineDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	elements+=Base*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//PackageDeclaration:
	//	'package' name=QualifiedName '{'
	//	elements+=Base*
	//	'}';
	public PackageDeclarationElements getPackageDeclarationAccess() {
		return pPackageDeclaration;
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}
	
	//StateMachine:
	//	'statemachine' name=ID 'initialState' initialState=[State]
	//	'control-object' controlObject=ControlObject ('events' ('{'
	//	events+=Event*
	//	'}')) ('states' ('{'
	//	states+=State*
	//	'}'));
	public StateMachineElements getStateMachineAccess() {
		return pStateMachine;
	}
	
	public ParserRule getStateMachineRule() {
		return getStateMachineAccess().getRule();
	}
	
	//Base:
	//	PackageDeclaration | StateMachine;
	public BaseElements getBaseAccess() {
		return pBase;
	}
	
	public ParserRule getBaseRule() {
		return getBaseAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//State:
	//	'state' name=ID
	//	'{'
	//	transitions+=Transition*
	//	'}';
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Transition:
	//	'transition' name=ID
	//	'=>' target=[State]
	//	'{' ('trigger' '{' trigger=[Event] '}') ('guard' '{' guard=Guard '}')? ('action' '{' action=Action '}')?
	//	'}';
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//Event:
	//	'event' name=ID;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//Guard:
	//	{Guard} name=ID;
	public GuardElements getGuardAccess() {
		return pGuard;
	}
	
	public ParserRule getGuardRule() {
		return getGuardAccess().getRule();
	}
	
	//Action:
	//	{Action} name=ID;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//ControlObject:
	//	'{'
	//	attributes+=ControlObjectAttribute*
	//	'}';
	public ControlObjectElements getControlObjectAccess() {
		return pControlObject;
	}
	
	public ParserRule getControlObjectRule() {
		return getControlObjectAccess().getRule();
	}
	
	//ControlObjectAttribute:
	//	'attribute' name=ID ('type' '=' type=AttributeBase);
	public ControlObjectAttributeElements getControlObjectAttributeAccess() {
		return pControlObjectAttribute;
	}
	
	public ParserRule getControlObjectAttributeRule() {
		return getControlObjectAttributeAccess().getRule();
	}
	
	//AttributeBase:
	//	ObjectType | SimpleType;
	public AttributeBaseElements getAttributeBaseAccess() {
		return pAttributeBase;
	}
	
	public ParserRule getAttributeBaseRule() {
		return getAttributeBaseAccess().getRule();
	}
	
	//SimpleType:
	//	type=InternalType;
	public SimpleTypeElements getSimpleTypeAccess() {
		return pSimpleType;
	}
	
	public ParserRule getSimpleTypeRule() {
		return getSimpleTypeAccess().getRule();
	}
	
	//ObjectType:
	//	type=STRING;
	public ObjectTypeElements getObjectTypeAccess() {
		return pObjectType;
	}
	
	public ParserRule getObjectTypeRule() {
		return getObjectTypeAccess().getRule();
	}
	
	//enum InternalType:
	//	NONE | BOOLEAN='java.lang.Boolean' | INTEGER='java.lang.Integer' | LONG='java.lang.Long' | FLOAT='java.lang.Float' |
	//	DECIMAL='java.lang.Decimal' |
	//	STRING='java.lang.String' | DATE='java.lang.Date' | DATETIME='java.lang.DateTime' | TIME='java.lang.Time' |
	//	LIST='java.util.List';
	public InternalTypeElements getInternalTypeAccess() {
		return eInternalType;
	}
	
	public EnumRule getInternalTypeRule() {
		return getInternalTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
