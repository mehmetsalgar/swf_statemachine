/*
 * generated by Xtext 2.9.1
 */
package org.salgar.swf_statemachine.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.salgar.swf_statemachine.xtext.services.StateMachineDslGrammarAccess;
import org.salgar.swf_statemachine.xtext.stateMachineDsl.ControlObject;
import org.salgar.swf_statemachine.xtext.stateMachineDsl.ControlObjectAttribute;
import org.salgar.swf_statemachine.xtext.stateMachineDsl.Event;
import org.salgar.swf_statemachine.xtext.stateMachineDsl.Guard;
import org.salgar.swf_statemachine.xtext.stateMachineDsl.Model;
import org.salgar.swf_statemachine.xtext.stateMachineDsl.ObjectType;
import org.salgar.swf_statemachine.xtext.stateMachineDsl.PackageDeclaration;
import org.salgar.swf_statemachine.xtext.stateMachineDsl.SimpleType;
import org.salgar.swf_statemachine.xtext.stateMachineDsl.State;
import org.salgar.swf_statemachine.xtext.stateMachineDsl.StateMachine;
import org.salgar.swf_statemachine.xtext.stateMachineDsl.StateMachineDslPackage;
import org.salgar.swf_statemachine.xtext.stateMachineDsl.Transition;

@SuppressWarnings("all")
public class StateMachineDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private StateMachineDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == StateMachineDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case StateMachineDslPackage.ACTION:
				sequence_Action(context, (org.salgar.swf_statemachine.xtext.stateMachineDsl.Action) semanticObject); 
				return; 
			case StateMachineDslPackage.CONTROL_OBJECT:
				sequence_ControlObject(context, (ControlObject) semanticObject); 
				return; 
			case StateMachineDslPackage.CONTROL_OBJECT_ATTRIBUTE:
				sequence_ControlObjectAttribute(context, (ControlObjectAttribute) semanticObject); 
				return; 
			case StateMachineDslPackage.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case StateMachineDslPackage.GUARD:
				sequence_Guard(context, (Guard) semanticObject); 
				return; 
			case StateMachineDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case StateMachineDslPackage.OBJECT_TYPE:
				sequence_ObjectType(context, (ObjectType) semanticObject); 
				return; 
			case StateMachineDslPackage.PACKAGE_DECLARATION:
				sequence_PackageDeclaration(context, (PackageDeclaration) semanticObject); 
				return; 
			case StateMachineDslPackage.SIMPLE_TYPE:
				sequence_SimpleType(context, (SimpleType) semanticObject); 
				return; 
			case StateMachineDslPackage.STATE:
				sequence_State(context, (State) semanticObject); 
				return; 
			case StateMachineDslPackage.STATE_MACHINE:
				sequence_StateMachine(context, (StateMachine) semanticObject); 
				return; 
			case StateMachineDslPackage.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Action(ISerializationContext context, org.salgar.swf_statemachine.xtext.stateMachineDsl.Action semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StateMachineDslPackage.Literals.ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachineDslPackage.Literals.ACTION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getActionAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ControlObjectAttribute returns ControlObjectAttribute
	 *
	 * Constraint:
	 *     (name=ID type=AttributeBase)
	 */
	protected void sequence_ControlObjectAttribute(ISerializationContext context, ControlObjectAttribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StateMachineDslPackage.Literals.CONTROL_OBJECT_ATTRIBUTE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachineDslPackage.Literals.CONTROL_OBJECT_ATTRIBUTE__NAME));
			if (transientValues.isValueTransient(semanticObject, StateMachineDslPackage.Literals.CONTROL_OBJECT_ATTRIBUTE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachineDslPackage.Literals.CONTROL_OBJECT_ATTRIBUTE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getControlObjectAttributeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getControlObjectAttributeAccess().getTypeAttributeBaseParserRuleCall_2_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ControlObject returns ControlObject
	 *
	 * Constraint:
	 *     attributes+=ControlObjectAttribute+
	 */
	protected void sequence_ControlObject(ISerializationContext context, ControlObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Event returns Event
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Event(ISerializationContext context, Event semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StateMachineDslPackage.Literals.EVENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachineDslPackage.Literals.EVENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEventAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Guard returns Guard
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Guard(ISerializationContext context, Guard semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StateMachineDslPackage.Literals.GUARD__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachineDslPackage.Literals.GUARD__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGuardAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     elements+=Base+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeBase returns ObjectType
	 *     ObjectType returns ObjectType
	 *
	 * Constraint:
	 *     type=STRING
	 */
	protected void sequence_ObjectType(ISerializationContext context, ObjectType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StateMachineDslPackage.Literals.OBJECT_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachineDslPackage.Literals.OBJECT_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObjectTypeAccess().getTypeSTRINGTerminalRuleCall_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PackageDeclaration returns PackageDeclaration
	 *     Base returns PackageDeclaration
	 *
	 * Constraint:
	 *     (name=QualifiedName elements+=Base*)
	 */
	protected void sequence_PackageDeclaration(ISerializationContext context, PackageDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeBase returns SimpleType
	 *     SimpleType returns SimpleType
	 *
	 * Constraint:
	 *     type=InternalType
	 */
	protected void sequence_SimpleType(ISerializationContext context, SimpleType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StateMachineDslPackage.Literals.SIMPLE_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachineDslPackage.Literals.SIMPLE_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSimpleTypeAccess().getTypeInternalTypeEnumRuleCall_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StateMachine returns StateMachine
	 *     Base returns StateMachine
	 *
	 * Constraint:
	 *     (name=ID initialState=[State|ID] controlObject=ControlObject events+=Event* states+=State*)
	 */
	protected void sequence_StateMachine(ISerializationContext context, StateMachine semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     State returns State
	 *
	 * Constraint:
	 *     (name=ID transitions+=Transition*)
	 */
	protected void sequence_State(ISerializationContext context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Transition returns Transition
	 *
	 * Constraint:
	 *     (name=ID target=[State|ID] trigger=[Event|ID] guard=Guard? action=Action?)
	 */
	protected void sequence_Transition(ISerializationContext context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
