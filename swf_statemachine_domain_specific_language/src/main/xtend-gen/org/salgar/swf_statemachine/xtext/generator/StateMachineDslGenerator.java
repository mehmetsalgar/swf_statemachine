/**
 * generated by Xtext 2.9.1
 */
package org.salgar.swf_statemachine.xtext.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import org.apache.commons.lang3.text.WordUtils;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.salgar.swf_statemachine.xtext.stateMachineDsl.Action;
import org.salgar.swf_statemachine.xtext.stateMachineDsl.AttributeBase;
import org.salgar.swf_statemachine.xtext.stateMachineDsl.ControlObject;
import org.salgar.swf_statemachine.xtext.stateMachineDsl.ControlObjectAttribute;
import org.salgar.swf_statemachine.xtext.stateMachineDsl.Event;
import org.salgar.swf_statemachine.xtext.stateMachineDsl.Guard;
import org.salgar.swf_statemachine.xtext.stateMachineDsl.InternalType;
import org.salgar.swf_statemachine.xtext.stateMachineDsl.ObjectType;
import org.salgar.swf_statemachine.xtext.stateMachineDsl.PackageDeclaration;
import org.salgar.swf_statemachine.xtext.stateMachineDsl.SimpleType;
import org.salgar.swf_statemachine.xtext.stateMachineDsl.State;
import org.salgar.swf_statemachine.xtext.stateMachineDsl.StateMachine;
import org.salgar.swf_statemachine.xtext.stateMachineDsl.Transition;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class StateMachineDslGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    final Function1<EObject, Boolean> _function = new Function1<EObject, Boolean>() {
      @Override
      public Boolean apply(final EObject object) {
        return Boolean.valueOf((object instanceof PackageDeclaration));
      }
    };
    EObject _findFirst = IteratorExtensions.<EObject>findFirst(_allContents, _function);
    QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(_findFirst);
    String _string = _fullyQualifiedName.toString("/");
    String _plus = (_string + "/enumeration/StateMachineEnumerationImpl.java");
    TreeIterator<EObject> _allContents_1 = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents_1);
    Iterable<StateMachine> _filter = Iterables.<StateMachine>filter(_iterable, StateMachine.class);
    TreeIterator<EObject> _allContents_2 = resource.getAllContents();
    final Function1<EObject, Boolean> _function_1 = new Function1<EObject, Boolean>() {
      @Override
      public Boolean apply(final EObject object) {
        return Boolean.valueOf((object instanceof PackageDeclaration));
      }
    };
    EObject _findFirst_1 = IteratorExtensions.<EObject>findFirst(_allContents_2, _function_1);
    CharSequence _complileStateMachineEnumeration = this.complileStateMachineEnumeration(_filter, ((PackageDeclaration) _findFirst_1));
    fsa.generateFile(_plus, _complileStateMachineEnumeration);
    TreeIterator<EObject> _allContents_3 = resource.getAllContents();
    Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(_allContents_3);
    Iterable<StateMachine> _filter_1 = Iterables.<StateMachine>filter(_iterable_1, StateMachine.class);
    for (final StateMachine e : _filter_1) {
      {
        EObject _eContainer = e.eContainer();
        QualifiedName _fullyQualifiedName_1 = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer);
        String _string_1 = _fullyQualifiedName_1.toString("/");
        String _plus_1 = (_string_1 + "/");
        String _name = e.getName();
        String _lowerCase = _name.toLowerCase();
        String _plus_2 = (_plus_1 + _lowerCase);
        String _plus_3 = (_plus_2 + "/enumeration/state/");
        String _name_1 = e.getName();
        String _plus_4 = (_plus_3 + _name_1);
        String _plus_5 = (_plus_4 + "_StateEnumerationImpl.java");
        TreeIterator<EObject> _eAllContents = e.eAllContents();
        Iterable<EObject> _iterable_2 = IteratorExtensions.<EObject>toIterable(_eAllContents);
        Iterable<State> _filter_2 = Iterables.<State>filter(_iterable_2, State.class);
        CharSequence _compileState = this.compileState(_filter_2, e);
        fsa.generateFile(_plus_5, _compileState);
        EObject _eContainer_1 = e.eContainer();
        QualifiedName _fullyQualifiedName_2 = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer_1);
        String _string_2 = _fullyQualifiedName_2.toString("/");
        String _plus_6 = (_string_2 + "/");
        String _name_2 = e.getName();
        String _lowerCase_1 = _name_2.toLowerCase();
        String _plus_7 = (_plus_6 + _lowerCase_1);
        String _plus_8 = (_plus_7 + "/enumeration/event/");
        String _name_3 = e.getName();
        String _plus_9 = (_plus_8 + _name_3);
        String _plus_10 = (_plus_9 + "_EventEnumerationImpl.java");
        TreeIterator<EObject> _eAllContents_1 = e.eAllContents();
        Iterable<EObject> _iterable_3 = IteratorExtensions.<EObject>toIterable(_eAllContents_1);
        Iterable<Event> _filter_3 = Iterables.<Event>filter(_iterable_3, Event.class);
        CharSequence _compileEvent = this.compileEvent(_filter_3, e);
        fsa.generateFile(_plus_10, _compileEvent);
        EObject _eContainer_2 = e.eContainer();
        QualifiedName _fullyQualifiedName_3 = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer_2);
        String _string_3 = _fullyQualifiedName_3.toString("/");
        String _plus_11 = (_string_3 + "/");
        String _name_4 = e.getName();
        String _lowerCase_2 = _name_4.toLowerCase();
        String _plus_12 = (_plus_11 + _lowerCase_2);
        String _plus_13 = (_plus_12 + "/configuration/");
        String _name_5 = e.getName();
        String _plus_14 = (_plus_13 + _name_5);
        String _plus_15 = (_plus_14 + "ControlObjectLocator.java");
        CharSequence _compileControlObjectLocator = this.compileControlObjectLocator(e);
        fsa.generateFile(_plus_15, _compileControlObjectLocator);
        EObject _eContainer_3 = e.eContainer();
        QualifiedName _fullyQualifiedName_4 = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer_3);
        String _string_4 = _fullyQualifiedName_4.toString("/");
        String _plus_16 = (_string_4 + "/");
        String _name_6 = e.getName();
        String _lowerCase_3 = _name_6.toLowerCase();
        String _plus_17 = (_plus_16 + _lowerCase_3);
        String _plus_18 = (_plus_17 + "/configuration/");
        String _name_7 = e.getName();
        String _plus_19 = (_plus_18 + _name_7);
        String _plus_20 = (_plus_19 + "GuardContainer.java");
        CharSequence _compileGuardContainer = this.compileGuardContainer(e);
        fsa.generateFile(_plus_20, _compileGuardContainer);
        EList<State> _states = e.getStates();
        for (final State state : _states) {
          EList<Transition> _transitions = state.getTransitions();
          for (final Transition transition : _transitions) {
            {
              Guard _guard = transition.getGuard();
              boolean _notEquals = (!Objects.equal(_guard, null));
              if (_notEquals) {
                EObject _eContainer_4 = e.eContainer();
                QualifiedName _fullyQualifiedName_5 = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer_4);
                String _string_5 = _fullyQualifiedName_5.toString("/");
                String _plus_21 = (_string_5 + "/");
                String _name_8 = e.getName();
                String _lowerCase_4 = _name_8.toLowerCase();
                String _plus_22 = (_plus_21 + _lowerCase_4);
                String _plus_23 = (_plus_22 + "/configuration/");
                String _name_9 = state.getName();
                String _lowerCase_5 = _name_9.toLowerCase();
                String _plus_24 = (_plus_23 + _lowerCase_5);
                String _plus_25 = (_plus_24 + "/guard/");
                String _name_10 = state.getName();
                String _plus_26 = (_plus_25 + _name_10);
                String _plus_27 = (_plus_26 + "___");
                State _target = transition.getTarget();
                String _name_11 = _target.getName();
                String _plus_28 = (_plus_27 + _name_11);
                String _plus_29 = (_plus_28 + "_");
                String _name_12 = transition.getName();
                String _plus_30 = (_plus_29 + _name_12);
                String _plus_31 = (_plus_30 + "_");
                Guard _guard_1 = transition.getGuard();
                String _name_13 = _guard_1.getName();
                String _plus_32 = (_plus_31 + _name_13);
                String _plus_33 = (_plus_32 + "_guard.java");
                CharSequence _compileGuard = this.compileGuard(e, state, transition);
                fsa.generateFile(_plus_33, _compileGuard);
              }
              Action _action = transition.getAction();
              boolean _notEquals_1 = (!Objects.equal(_action, null));
              if (_notEquals_1) {
                EObject _eContainer_5 = e.eContainer();
                QualifiedName _fullyQualifiedName_6 = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer_5);
                String _string_6 = _fullyQualifiedName_6.toString("/");
                String _plus_34 = (_string_6 + "/");
                String _name_14 = e.getName();
                String _lowerCase_6 = _name_14.toLowerCase();
                String _plus_35 = (_plus_34 + _lowerCase_6);
                String _plus_36 = (_plus_35 + "/configuration/");
                String _name_15 = state.getName();
                String _lowerCase_7 = _name_15.toLowerCase();
                String _plus_37 = (_plus_36 + _lowerCase_7);
                String _plus_38 = (_plus_37 + "/action/");
                String _name_16 = state.getName();
                String _plus_39 = (_plus_38 + _name_16);
                String _plus_40 = (_plus_39 + "___");
                State _target_1 = transition.getTarget();
                String _name_17 = _target_1.getName();
                String _plus_41 = (_plus_40 + _name_17);
                String _plus_42 = (_plus_41 + "_");
                String _name_18 = transition.getName();
                String _plus_43 = (_plus_42 + _name_18);
                String _plus_44 = (_plus_43 + "_");
                Action _action_1 = transition.getAction();
                String _name_19 = _action_1.getName();
                String _plus_45 = (_plus_44 + _name_19);
                String _plus_46 = (_plus_45 + "_action.java");
                CharSequence _compileAction = this.compileAction(e, state, transition);
                fsa.generateFile(_plus_46, _compileAction);
              }
            }
          }
        }
        EObject _eContainer_4 = e.eContainer();
        QualifiedName _fullyQualifiedName_5 = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer_4);
        String _string_5 = _fullyQualifiedName_5.toString("/");
        String _plus_21 = (_string_5 + "/");
        String _name_8 = e.getName();
        String _lowerCase_4 = _name_8.toLowerCase();
        String _plus_22 = (_plus_21 + _lowerCase_4);
        String _plus_23 = (_plus_22 + "/configuration/");
        String _name_9 = e.getName();
        String _plus_24 = (_plus_23 + _name_9);
        String _plus_25 = (_plus_24 + "ActionContainer.java");
        CharSequence _compileActionContainer = this.compileActionContainer(e);
        fsa.generateFile(_plus_25, _compileActionContainer);
        EObject _eContainer_5 = e.eContainer();
        QualifiedName _fullyQualifiedName_6 = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer_5);
        String _string_6 = _fullyQualifiedName_6.toString("/");
        String _plus_26 = (_string_6 + "/");
        String _name_10 = e.getName();
        String _lowerCase_5 = _name_10.toLowerCase();
        String _plus_27 = (_plus_26 + _lowerCase_5);
        String _plus_28 = (_plus_27 + "/controlobject/Abstract");
        String _name_11 = e.getName();
        String _plus_29 = (_plus_28 + _name_11);
        String _plus_30 = (_plus_29 + "ControlObject.java");
        CharSequence _compileControlObject = this.compileControlObject(e);
        fsa.generateFile(_plus_30, _compileControlObject);
        EObject _eContainer_6 = e.eContainer();
        QualifiedName _fullyQualifiedName_7 = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer_6);
        String _string_7 = _fullyQualifiedName_7.toString("/");
        String _plus_31 = (_string_7 + "/");
        String _name_12 = e.getName();
        String _lowerCase_6 = _name_12.toLowerCase();
        String _plus_32 = (_plus_31 + _lowerCase_6);
        String _plus_33 = (_plus_32 + "/configuration/");
        String _name_13 = e.getName();
        String _plus_34 = (_plus_33 + _name_13);
        String _plus_35 = (_plus_34 + "Configuration.java");
        CharSequence _compileStateMachine = this.compileStateMachine(e);
        fsa.generateFile(_plus_35, _compileStateMachine);
      }
    }
  }
  
  public CharSequence complileStateMachineEnumeration(final Iterable<StateMachine> e, final PackageDeclaration p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(p);
    _builder.append(_fullyQualifiedName, "");
    _builder.append(".enumeration;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import org.salgar.statemachine.domain.StateMachineEnumeration;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public enum StateMachineEnumerationImpl implements StateMachineEnumeration {");
    _builder.newLine();
    {
      boolean _hasElements = false;
      for(final StateMachine statemachine : e) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "");
        }
        String _name = statemachine.getName();
        _builder.append(_name, "");
        _builder.append("(\"");
        String _name_1 = statemachine.getName();
        _builder.append(_name_1, "");
        _builder.append("\")");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
      }
    }
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String name;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("StateMachineEnumerationImpl(String name) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("this.name = name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getStateMachineName() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String toString() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileState(final Iterable<State> e, final StateMachine s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    EObject _eContainer = s.eContainer();
    QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer);
    _builder.append(_fullyQualifiedName, "");
    _builder.append(".");
    String _name = s.getName();
    String _lowerCase = _name.toLowerCase();
    _builder.append(_lowerCase, "");
    _builder.append(".enumeration.state;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import org.salgar.statemachine.domain.StateEnumeration;");
    _builder.newLine();
    _builder.append("import org.salgar.statemachine.domain.StateMachineEnumeration;");
    _builder.newLine();
    _builder.append("import ");
    EObject _eContainer_1 = s.eContainer();
    QualifiedName _fullyQualifiedName_1 = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer_1);
    _builder.append(_fullyQualifiedName_1, "");
    _builder.append(".enumeration.StateMachineEnumerationImpl;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public enum ");
    String _name_1 = s.getName();
    _builder.append(_name_1, "");
    _builder.append("_StateEnumerationImpl implements StateEnumeration {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      boolean _hasElements = false;
      for(final State state : e) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "\t");
        }
        _builder.append("\t");
        String _name_2 = state.getName();
        _builder.append(_name_2, "\t");
        _builder.append("(\"");
        String _name_3 = state.getName();
        String _lowerCase_1 = _name_3.toLowerCase();
        _builder.append(_lowerCase_1, "\t");
        _builder.append("\", StateMachineEnumerationImpl.");
        String _name_4 = s.getName();
        _builder.append(_name_4, "\t");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
      }
    }
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String stateName;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private StateMachineEnumeration stateMachineEnumeration;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    String _name_5 = s.getName();
    _builder.append(_name_5, "\t");
    _builder.append("_StateEnumerationImpl(String stateName, StateMachineEnumeration stateMachineEnumeration) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.stateName = stateName;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.stateMachineEnumeration = stateMachineEnumeration;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public StateMachineEnumeration getStateMachineName() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.stateMachineEnumeration;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getStateName() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.stateName;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String toString() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("StringBuilder sb = new StringBuilder();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("sb.append(\"State Name: \");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("sb.append(this.stateName);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("sb.append(\" stateMachine: \");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("sb.append(this.stateMachineEnumeration.getStateMachineName());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return sb.toString();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileControlObjectLocator(final StateMachine e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    EObject _eContainer = e.eContainer();
    QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer);
    _builder.append(_fullyQualifiedName, "");
    _builder.append(".");
    String _name = e.getName();
    String _lowerCase = _name.toLowerCase();
    _builder.append(_lowerCase, "");
    _builder.append(".configuration;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import ");
    EObject _eContainer_1 = e.eContainer();
    QualifiedName _fullyQualifiedName_1 = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer_1);
    _builder.append(_fullyQualifiedName_1, "");
    _builder.append(".");
    String _name_1 = e.getName();
    String _lowerCase_1 = _name_1.toLowerCase();
    _builder.append(_lowerCase_1, "");
    _builder.append(".controlobject.Abstract");
    String _name_2 = e.getName();
    _builder.append(_name_2, "");
    _builder.append("ControlObject;");
    _builder.newLineIfNotEmpty();
    _builder.append("import org.springframework.beans.factory.annotation.Lookup;");
    _builder.newLine();
    _builder.append("import org.springframework.stereotype.Component;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Component");
    _builder.newLine();
    _builder.append("public class ");
    String _name_3 = e.getName();
    _builder.append(_name_3, "");
    _builder.append("ControlObjectLocator {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Lookup");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Abstract");
    String _name_4 = e.getName();
    _builder.append(_name_4, "\t");
    _builder.append("ControlObject getControlObject() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileControlObject(final StateMachine e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    EObject _eContainer = e.eContainer();
    QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer);
    _builder.append(_fullyQualifiedName, "");
    _builder.append(".");
    String _name = e.getName();
    String _lowerCase = _name.toLowerCase();
    _builder.append(_lowerCase, "");
    _builder.append(".controlobject;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("*");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public abstract class Abstract");
    String _name_1 = e.getName();
    _builder.append(_name_1, "");
    _builder.append("ControlObject implements");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("java.io.Serializable {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private final static long serialVersionUID = -2067325695L;");
    _builder.newLine();
    _builder.newLine();
    {
      ControlObject _controlObject = e.getControlObject();
      EList<ControlObjectAttribute> _attributes = _controlObject.getAttributes();
      for(final ControlObjectAttribute controlObjectAttribute : _attributes) {
        {
          AttributeBase _type = controlObjectAttribute.getType();
          if ((_type instanceof SimpleType)) {
            _builder.append("\t");
            AttributeBase _type_1 = controlObjectAttribute.getType();
            final SimpleType tmp = ((SimpleType) _type_1);
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            InternalType _type_2 = tmp.getType();
            String _literal = _type_2.getLiteral();
            _builder.append(_literal, "\t");
            _builder.append(" ");
            String _name_2 = controlObjectAttribute.getName();
            _builder.append(_name_2, "\t");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t");
            AttributeBase _type_3 = controlObjectAttribute.getType();
            final ObjectType tmp_1 = ((ObjectType) _type_3);
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            String _type_4 = tmp_1.getType();
            _builder.append(_type_4, "\t");
            _builder.append(" ");
            String _name_3 = controlObjectAttribute.getName();
            _builder.append(_name_3, "\t");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    {
      ControlObject _controlObject_1 = e.getControlObject();
      EList<ControlObjectAttribute> _attributes_1 = _controlObject_1.getAttributes();
      for(final ControlObjectAttribute controlObjectAttribute_1 : _attributes_1) {
        {
          AttributeBase _type_5 = controlObjectAttribute_1.getType();
          if ((_type_5 instanceof SimpleType)) {
            _builder.append("\t");
            AttributeBase _type_6 = controlObjectAttribute_1.getType();
            final SimpleType tmp_2 = ((SimpleType) _type_6);
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("public ");
            InternalType _type_7 = tmp_2.getType();
            String _literal_1 = _type_7.getLiteral();
            _builder.append(_literal_1, "\t");
            _builder.append(" get");
            String _name_4 = controlObjectAttribute_1.getName();
            String _capitalize = WordUtils.capitalize(_name_4);
            _builder.append(_capitalize, "\t");
            _builder.append("() {");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t");
            AttributeBase _type_8 = controlObjectAttribute_1.getType();
            final ObjectType tmp_3 = ((ObjectType) _type_8);
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("public ");
            String _type_9 = tmp_3.getType();
            _builder.append(_type_9, "\t");
            _builder.append(" get");
            String _name_5 = controlObjectAttribute_1.getName();
            String _capitalize_1 = WordUtils.capitalize(_name_5);
            _builder.append(_capitalize_1, "\t");
            _builder.append("() {");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return ");
        String _name_6 = controlObjectAttribute_1.getName();
        _builder.append(_name_6, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public abstract void resetStateMachine();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileEvent(final Iterable<Event> e, final StateMachine s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    EObject _eContainer = s.eContainer();
    QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer);
    _builder.append(_fullyQualifiedName, "");
    _builder.append(".");
    String _name = s.getName();
    String _lowerCase = _name.toLowerCase();
    _builder.append(_lowerCase, "");
    _builder.append(".enumeration.event;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import org.salgar.statemachine.domain.EventEnumeration;");
    _builder.newLine();
    _builder.append("import org.salgar.statemachine.domain.StateMachineEnumeration;");
    _builder.newLine();
    _builder.append("import ");
    EObject _eContainer_1 = s.eContainer();
    QualifiedName _fullyQualifiedName_1 = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer_1);
    _builder.append(_fullyQualifiedName_1, "");
    _builder.append(".enumeration.StateMachineEnumerationImpl;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public enum ");
    String _name_1 = s.getName();
    _builder.append(_name_1, "");
    _builder.append("_EventEnumerationImpl implements EventEnumeration {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      boolean _hasElements = false;
      for(final Event event : e) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "\t");
        }
        _builder.append("\t");
        String _name_2 = event.getName();
        _builder.append(_name_2, "\t");
        _builder.append("(\"");
        String _name_3 = event.getName();
        String _lowerCase_1 = _name_3.toLowerCase();
        _builder.append(_lowerCase_1, "\t");
        _builder.append("\", StateMachineEnumerationImpl.");
        String _name_4 = s.getName();
        _builder.append(_name_4, "\t");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
      }
    }
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String eventName;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private StateMachineEnumeration stateMachineEnumeration;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    String _name_5 = s.getName();
    _builder.append(_name_5, "\t");
    _builder.append("_EventEnumerationImpl(String eventName, StateMachineEnumeration stateMachineEnumeration) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.eventName = eventName;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.stateMachineEnumeration = stateMachineEnumeration;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public StateMachineEnumeration getStatemachineName() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.stateMachineEnumeration;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getEventName() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.eventName;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String toString() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("StringBuilder sb = new StringBuilder();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("sb.append(\"eventName: \");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("sb.append(this.eventName);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("sb.append(\" stateMachine: \");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("sb.append(this.stateMachineEnumeration.getStateMachineName());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return sb.toString();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileGuard(final StateMachine e, final State state, final Transition transition) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    EObject _eContainer = e.eContainer();
    QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer);
    _builder.append(_fullyQualifiedName, "");
    _builder.append(".");
    String _name = e.getName();
    String _lowerCase = _name.toLowerCase();
    _builder.append(_lowerCase, "");
    _builder.append(".configuration.");
    String _name_1 = state.getName();
    String _lowerCase_1 = _name_1.toLowerCase();
    _builder.append(_lowerCase_1, "");
    _builder.append(".guard;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import ");
    EObject _eContainer_1 = e.eContainer();
    QualifiedName _fullyQualifiedName_1 = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer_1);
    _builder.append(_fullyQualifiedName_1, "");
    _builder.append(".");
    String _name_2 = e.getName();
    String _lowerCase_2 = _name_2.toLowerCase();
    _builder.append(_lowerCase_2, "");
    _builder.append(".enumeration.event.");
    String _name_3 = e.getName();
    _builder.append(_name_3, "");
    _builder.append("_EventEnumerationImpl;");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    EObject _eContainer_2 = e.eContainer();
    QualifiedName _fullyQualifiedName_2 = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer_2);
    _builder.append(_fullyQualifiedName_2, "");
    _builder.append(".");
    String _name_4 = e.getName();
    String _lowerCase_3 = _name_4.toLowerCase();
    _builder.append(_lowerCase_3, "");
    _builder.append(".enumeration.state.");
    String _name_5 = e.getName();
    _builder.append(_name_5, "");
    _builder.append("_StateEnumerationImpl;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import org.springframework.beans.factory.annotation.Autowired;");
    _builder.newLine();
    _builder.append("import org.springframework.context.annotation.Configuration;");
    _builder.newLine();
    _builder.append("import org.springframework.context.annotation.Bean;");
    _builder.newLine();
    _builder.append("import org.springframework.statemachine.StateContext;");
    _builder.newLine();
    _builder.append("import org.springframework.statemachine.guard.Guard;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.apache.log4j.Logger;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Configuration");
    _builder.newLine();
    _builder.append("public class ");
    String _name_6 = state.getName();
    _builder.append(_name_6, "");
    _builder.append("___");
    State _target = transition.getTarget();
    String _name_7 = _target.getName();
    _builder.append(_name_7, "");
    _builder.append("_");
    String _name_8 = transition.getName();
    _builder.append(_name_8, "");
    _builder.append("_");
    Guard _guard = transition.getGuard();
    String _name_9 = _guard.getName();
    _builder.append(_name_9, "");
    _builder.append("_guard {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("private static final Logger LOG = Logger.getLogger(");
    _builder.newLine();
    _builder.append("\t\t\t");
    String _name_10 = state.getName();
    _builder.append(_name_10, "\t\t\t");
    _builder.append("___");
    State _target_1 = transition.getTarget();
    String _name_11 = _target_1.getName();
    _builder.append(_name_11, "\t\t\t");
    _builder.append("_");
    String _name_12 = transition.getName();
    _builder.append(_name_12, "\t\t\t");
    _builder.append("_");
    Guard _guard_1 = transition.getGuard();
    String _name_13 = _guard_1.getName();
    _builder.append(_name_13, "\t\t\t");
    _builder.append("_guard.class);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Autowired(required = false)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private I");
    String _name_14 = state.getName();
    _builder.append(_name_14, "\t");
    _builder.append("___");
    State _target_2 = transition.getTarget();
    String _name_15 = _target_2.getName();
    _builder.append(_name_15, "\t");
    _builder.append("_");
    String _name_16 = transition.getName();
    _builder.append(_name_16, "\t");
    _builder.append("_");
    Guard _guard_2 = transition.getGuard();
    String _name_17 = _guard_2.getName();
    _builder.append(_name_17, "\t");
    _builder.append("Guard realImplementation;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Bean");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Guard<");
    String _name_18 = e.getName();
    _builder.append(_name_18, "\t");
    _builder.append("_StateEnumerationImpl, ");
    String _name_19 = e.getName();
    _builder.append(_name_19, "\t");
    _builder.append("_EventEnumerationImpl> ");
    String _name_20 = state.getName();
    _builder.append(_name_20, "\t");
    _builder.append("_");
    State _target_3 = transition.getTarget();
    String _name_21 = _target_3.getName();
    _builder.append(_name_21, "\t");
    _builder.append("_");
    String _name_22 = transition.getName();
    _builder.append(_name_22, "\t");
    _builder.append("_");
    Guard _guard_3 = transition.getGuard();
    String _name_23 = _guard_3.getName();
    _builder.append(_name_23, "\t");
    _builder.append("_guard() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return new Guard<");
    String _name_24 = e.getName();
    _builder.append(_name_24, "\t\t");
    _builder.append("_StateEnumerationImpl, ");
    String _name_25 = e.getName();
    _builder.append(_name_25, "\t\t");
    _builder.append("_EventEnumerationImpl>() {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("public boolean evaluate(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("StateContext<");
    String _name_26 = e.getName();
    _builder.append(_name_26, "\t\t\t\t\t");
    _builder.append("_StateEnumerationImpl, ");
    String _name_27 = e.getName();
    _builder.append(_name_27, "\t\t\t\t\t");
    _builder.append("_EventEnumerationImpl> context) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("if (realImplementation != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return realImplementation.evaluate(context);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t    ");
    _builder.append("LOG.warn(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("\"This Guard defined in the Model but Spring could not find a concrete implementation class!\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public interface I");
    String _name_28 = state.getName();
    _builder.append(_name_28, "\t");
    _builder.append("___");
    State _target_4 = transition.getTarget();
    String _name_29 = _target_4.getName();
    _builder.append(_name_29, "\t");
    _builder.append("_");
    String _name_30 = transition.getName();
    _builder.append(_name_30, "\t");
    _builder.append("_");
    Guard _guard_4 = transition.getGuard();
    String _name_31 = _guard_4.getName();
    _builder.append(_name_31, "\t");
    _builder.append("Guard {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("boolean evaluate(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("StateContext<");
    String _name_32 = e.getName();
    _builder.append(_name_32, "\t\t\t\t");
    _builder.append("_StateEnumerationImpl, ");
    String _name_33 = e.getName();
    _builder.append(_name_33, "\t\t\t\t");
    _builder.append("_EventEnumerationImpl> context);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileAction(final StateMachine e, final State state, final Transition transition) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    EObject _eContainer = e.eContainer();
    QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer);
    _builder.append(_fullyQualifiedName, "");
    _builder.append(".");
    String _name = e.getName();
    String _lowerCase = _name.toLowerCase();
    _builder.append(_lowerCase, "");
    _builder.append(".configuration.");
    String _name_1 = state.getName();
    String _lowerCase_1 = _name_1.toLowerCase();
    _builder.append(_lowerCase_1, "");
    _builder.append(".action;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import ");
    EObject _eContainer_1 = e.eContainer();
    QualifiedName _fullyQualifiedName_1 = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer_1);
    _builder.append(_fullyQualifiedName_1, "");
    _builder.append(".");
    String _name_2 = e.getName();
    String _lowerCase_2 = _name_2.toLowerCase();
    _builder.append(_lowerCase_2, "");
    _builder.append(".enumeration.event.");
    String _name_3 = e.getName();
    _builder.append(_name_3, "");
    _builder.append("_EventEnumerationImpl;");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    EObject _eContainer_2 = e.eContainer();
    QualifiedName _fullyQualifiedName_2 = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer_2);
    _builder.append(_fullyQualifiedName_2, "");
    _builder.append(".");
    String _name_4 = e.getName();
    String _lowerCase_3 = _name_4.toLowerCase();
    _builder.append(_lowerCase_3, "");
    _builder.append(".enumeration.state.");
    String _name_5 = e.getName();
    _builder.append(_name_5, "");
    _builder.append("_StateEnumerationImpl;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import org.springframework.beans.factory.annotation.Autowired;");
    _builder.newLine();
    _builder.append("import org.springframework.context.annotation.Configuration;");
    _builder.newLine();
    _builder.append("import org.springframework.context.annotation.Bean;");
    _builder.newLine();
    _builder.append("import org.springframework.statemachine.StateContext;");
    _builder.newLine();
    _builder.append("import org.springframework.statemachine.action.Action;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.apache.log4j.Logger;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Configuration");
    _builder.newLine();
    _builder.append("public class ");
    String _name_6 = state.getName();
    _builder.append(_name_6, "");
    _builder.append("___");
    State _target = transition.getTarget();
    String _name_7 = _target.getName();
    _builder.append(_name_7, "");
    _builder.append("_");
    String _name_8 = transition.getName();
    _builder.append(_name_8, "");
    _builder.append("_");
    Action _action = transition.getAction();
    String _name_9 = _action.getName();
    _builder.append(_name_9, "");
    _builder.append("_action {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private static final Logger LOG = Logger.getLogger(");
    _builder.newLine();
    _builder.append("\t\t\t");
    String _name_10 = state.getName();
    _builder.append(_name_10, "\t\t\t");
    _builder.append("___");
    State _target_1 = transition.getTarget();
    String _name_11 = _target_1.getName();
    _builder.append(_name_11, "\t\t\t");
    _builder.append("_");
    String _name_12 = transition.getName();
    _builder.append(_name_12, "\t\t\t");
    _builder.append("_");
    Action _action_1 = transition.getAction();
    String _name_13 = _action_1.getName();
    _builder.append(_name_13, "\t\t\t");
    _builder.append("_action.class);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Autowired(required = false)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private I");
    String _name_14 = state.getName();
    _builder.append(_name_14, "\t");
    _builder.append("___");
    State _target_2 = transition.getTarget();
    String _name_15 = _target_2.getName();
    _builder.append(_name_15, "\t");
    _builder.append("_");
    String _name_16 = transition.getName();
    _builder.append(_name_16, "\t");
    _builder.append("_");
    Action _action_2 = transition.getAction();
    String _name_17 = _action_2.getName();
    _builder.append(_name_17, "\t");
    _builder.append("Action realImplementation;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Bean");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Action<");
    String _name_18 = e.getName();
    _builder.append(_name_18, "\t");
    _builder.append("_StateEnumerationImpl, ");
    String _name_19 = e.getName();
    _builder.append(_name_19, "\t");
    _builder.append("_EventEnumerationImpl> ");
    String _name_20 = state.getName();
    _builder.append(_name_20, "\t");
    _builder.append("_");
    State _target_3 = transition.getTarget();
    String _name_21 = _target_3.getName();
    _builder.append(_name_21, "\t");
    _builder.append("_");
    String _name_22 = transition.getName();
    _builder.append(_name_22, "\t");
    _builder.append("_");
    Action _action_3 = transition.getAction();
    String _name_23 = _action_3.getName();
    _builder.append(_name_23, "\t");
    _builder.append("_action() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return new Action<");
    String _name_24 = e.getName();
    _builder.append(_name_24, "\t\t");
    _builder.append("_StateEnumerationImpl, ");
    String _name_25 = e.getName();
    _builder.append(_name_25, "\t\t");
    _builder.append("_EventEnumerationImpl>() {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("public void execute(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("StateContext<");
    String _name_26 = e.getName();
    _builder.append(_name_26, "\t\t\t\t\t");
    _builder.append("_StateEnumerationImpl, ");
    String _name_27 = e.getName();
    _builder.append(_name_27, "\t\t\t\t\t");
    _builder.append("_EventEnumerationImpl> context) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("if (realImplementation != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("realImplementation.execute(context);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("LOG.warn(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("\"This Action defined in the Model but Spring could not find a concrete implementation class!\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public interface I");
    String _name_28 = state.getName();
    _builder.append(_name_28, "\t");
    _builder.append("___");
    State _target_4 = transition.getTarget();
    String _name_29 = _target_4.getName();
    _builder.append(_name_29, "\t");
    _builder.append("_");
    String _name_30 = transition.getName();
    _builder.append(_name_30, "\t");
    _builder.append("_");
    Action _action_4 = transition.getAction();
    String _name_31 = _action_4.getName();
    _builder.append(_name_31, "\t");
    _builder.append("Action {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("void execute(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("StateContext<");
    String _name_32 = e.getName();
    _builder.append(_name_32, "\t\t\t\t");
    _builder.append("_StateEnumerationImpl, ");
    String _name_33 = e.getName();
    _builder.append(_name_33, "\t\t\t\t");
    _builder.append("_EventEnumerationImpl> context);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileActionContainer(final StateMachine e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    EObject _eContainer = e.eContainer();
    QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer);
    _builder.append(_fullyQualifiedName, "");
    _builder.append(".");
    String _name = e.getName();
    String _lowerCase = _name.toLowerCase();
    _builder.append(_lowerCase, "");
    _builder.append(".configuration;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import org.springframework.beans.factory.annotation.Autowired;");
    _builder.newLine();
    _builder.append("import org.springframework.context.annotation.Configuration;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Configuration");
    _builder.newLine();
    _builder.append("public class ");
    String _name_1 = e.getName();
    _builder.append(_name_1, "");
    _builder.append("ActionContainer {");
    _builder.newLineIfNotEmpty();
    {
      EList<State> _states = e.getStates();
      for(final State state : _states) {
        {
          EList<Transition> _transitions = state.getTransitions();
          for(final Transition transition : _transitions) {
            {
              Action _action = transition.getAction();
              boolean _notEquals = (!Objects.equal(_action, null));
              if (_notEquals) {
                _builder.append("\t");
                _builder.append("@Autowired");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("private ");
                EObject _eContainer_1 = e.eContainer();
                QualifiedName _fullyQualifiedName_1 = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer_1);
                _builder.append(_fullyQualifiedName_1, "\t");
                _builder.append(".");
                String _name_2 = e.getName();
                String _lowerCase_1 = _name_2.toLowerCase();
                _builder.append(_lowerCase_1, "\t");
                _builder.append(".configuration.");
                String _name_3 = state.getName();
                String _lowerCase_2 = _name_3.toLowerCase();
                _builder.append(_lowerCase_2, "\t");
                _builder.append(".action.");
                String _name_4 = state.getName();
                _builder.append(_name_4, "\t");
                _builder.append("___");
                State _target = transition.getTarget();
                String _name_5 = _target.getName();
                _builder.append(_name_5, "\t");
                _builder.append("_");
                String _name_6 = transition.getName();
                _builder.append(_name_6, "\t");
                _builder.append("_");
                Action _action_1 = transition.getAction();
                String _name_7 = _action_1.getName();
                _builder.append(_name_7, "\t");
                _builder.append("_action ");
                String _name_8 = state.getName();
                String _lowerCase_3 = _name_8.toLowerCase();
                _builder.append(_lowerCase_3, "\t");
                _builder.append("___");
                State _target_1 = transition.getTarget();
                String _name_9 = _target_1.getName();
                _builder.append(_name_9, "\t");
                _builder.append("_");
                String _name_10 = transition.getName();
                _builder.append(_name_10, "\t");
                _builder.append("_");
                Action _action_2 = transition.getAction();
                String _name_11 = _action_2.getName();
                _builder.append(_name_11, "\t");
                _builder.append("_action;");
                _builder.newLineIfNotEmpty();
                _builder.newLine();
                _builder.append("\t");
                _builder.append("public ");
                EObject _eContainer_2 = e.eContainer();
                QualifiedName _fullyQualifiedName_2 = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer_2);
                _builder.append(_fullyQualifiedName_2, "\t");
                _builder.append(".");
                String _name_12 = e.getName();
                String _lowerCase_4 = _name_12.toLowerCase();
                _builder.append(_lowerCase_4, "\t");
                _builder.append(".configuration.");
                String _name_13 = state.getName();
                String _lowerCase_5 = _name_13.toLowerCase();
                _builder.append(_lowerCase_5, "\t");
                _builder.append(".action.");
                String _name_14 = state.getName();
                _builder.append(_name_14, "\t");
                _builder.append("___");
                State _target_2 = transition.getTarget();
                String _name_15 = _target_2.getName();
                _builder.append(_name_15, "\t");
                _builder.append("_");
                String _name_16 = transition.getName();
                _builder.append(_name_16, "\t");
                _builder.append("_");
                Action _action_3 = transition.getAction();
                String _name_17 = _action_3.getName();
                _builder.append(_name_17, "\t");
                _builder.append("_action get");
                String _name_18 = state.getName();
                _builder.append(_name_18, "\t");
                _builder.append("___");
                State _target_3 = transition.getTarget();
                String _name_19 = _target_3.getName();
                _builder.append(_name_19, "\t");
                _builder.append("_");
                String _name_20 = transition.getName();
                _builder.append(_name_20, "\t");
                _builder.append("_");
                Action _action_4 = transition.getAction();
                String _name_21 = _action_4.getName();
                _builder.append(_name_21, "\t");
                _builder.append("_action() {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("return ");
                String _name_22 = state.getName();
                String _lowerCase_6 = _name_22.toLowerCase();
                _builder.append(_lowerCase_6, "\t\t");
                _builder.append("___");
                State _target_4 = transition.getTarget();
                String _name_23 = _target_4.getName();
                _builder.append(_name_23, "\t\t");
                _builder.append("_");
                String _name_24 = transition.getName();
                _builder.append(_name_24, "\t\t");
                _builder.append("_");
                Action _action_5 = transition.getAction();
                String _name_25 = _action_5.getName();
                _builder.append(_name_25, "\t\t");
                _builder.append("_action;");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
              }
            }
          }
        }
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileGuardContainer(final StateMachine e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    EObject _eContainer = e.eContainer();
    QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer);
    _builder.append(_fullyQualifiedName, "");
    _builder.append(".");
    String _name = e.getName();
    String _lowerCase = _name.toLowerCase();
    _builder.append(_lowerCase, "");
    _builder.append(".configuration;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import org.springframework.beans.factory.annotation.Autowired;");
    _builder.newLine();
    _builder.append("import org.springframework.context.annotation.Configuration;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Configuration");
    _builder.newLine();
    _builder.append("public class ");
    String _name_1 = e.getName();
    _builder.append(_name_1, "");
    _builder.append("GuardContainer {");
    _builder.newLineIfNotEmpty();
    {
      EList<State> _states = e.getStates();
      for(final State state : _states) {
        {
          EList<Transition> _transitions = state.getTransitions();
          for(final Transition transition : _transitions) {
            {
              Guard _guard = transition.getGuard();
              boolean _notEquals = (!Objects.equal(_guard, null));
              if (_notEquals) {
                _builder.append("\t");
                _builder.append("@Autowired");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("private ");
                EObject _eContainer_1 = e.eContainer();
                QualifiedName _fullyQualifiedName_1 = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer_1);
                _builder.append(_fullyQualifiedName_1, "\t");
                _builder.append(".");
                String _name_2 = e.getName();
                String _lowerCase_1 = _name_2.toLowerCase();
                _builder.append(_lowerCase_1, "\t");
                _builder.append(".configuration.");
                String _name_3 = state.getName();
                String _lowerCase_2 = _name_3.toLowerCase();
                _builder.append(_lowerCase_2, "\t");
                _builder.append(".guard.");
                String _name_4 = state.getName();
                _builder.append(_name_4, "\t");
                _builder.append("___");
                State _target = transition.getTarget();
                String _name_5 = _target.getName();
                _builder.append(_name_5, "\t");
                _builder.append("_");
                String _name_6 = transition.getName();
                _builder.append(_name_6, "\t");
                _builder.append("_");
                Guard _guard_1 = transition.getGuard();
                String _name_7 = _guard_1.getName();
                _builder.append(_name_7, "\t");
                _builder.append("_guard ");
                String _name_8 = state.getName();
                String _lowerCase_3 = _name_8.toLowerCase();
                _builder.append(_lowerCase_3, "\t");
                _builder.append("___");
                State _target_1 = transition.getTarget();
                String _name_9 = _target_1.getName();
                _builder.append(_name_9, "\t");
                _builder.append("_");
                String _name_10 = transition.getName();
                _builder.append(_name_10, "\t");
                _builder.append("_");
                Guard _guard_2 = transition.getGuard();
                String _name_11 = _guard_2.getName();
                _builder.append(_name_11, "\t");
                _builder.append("_guard;");
                _builder.newLineIfNotEmpty();
                _builder.newLine();
                _builder.append("\t");
                _builder.append("public ");
                EObject _eContainer_2 = e.eContainer();
                QualifiedName _fullyQualifiedName_2 = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer_2);
                _builder.append(_fullyQualifiedName_2, "\t");
                _builder.append(".");
                String _name_12 = e.getName();
                String _lowerCase_4 = _name_12.toLowerCase();
                _builder.append(_lowerCase_4, "\t");
                _builder.append(".configuration.");
                String _name_13 = state.getName();
                String _lowerCase_5 = _name_13.toLowerCase();
                _builder.append(_lowerCase_5, "\t");
                _builder.append(".guard.");
                String _name_14 = state.getName();
                _builder.append(_name_14, "\t");
                _builder.append("___");
                State _target_2 = transition.getTarget();
                String _name_15 = _target_2.getName();
                _builder.append(_name_15, "\t");
                _builder.append("_");
                String _name_16 = transition.getName();
                _builder.append(_name_16, "\t");
                _builder.append("_");
                Guard _guard_3 = transition.getGuard();
                String _name_17 = _guard_3.getName();
                _builder.append(_name_17, "\t");
                _builder.append("_guard get");
                String _name_18 = state.getName();
                _builder.append(_name_18, "\t");
                _builder.append("___");
                State _target_3 = transition.getTarget();
                String _name_19 = _target_3.getName();
                _builder.append(_name_19, "\t");
                _builder.append("_");
                String _name_20 = transition.getName();
                _builder.append(_name_20, "\t");
                _builder.append("_");
                Guard _guard_4 = transition.getGuard();
                String _name_21 = _guard_4.getName();
                _builder.append(_name_21, "\t");
                _builder.append("_guard() {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("return ");
                String _name_22 = state.getName();
                String _lowerCase_6 = _name_22.toLowerCase();
                _builder.append(_lowerCase_6, "\t\t");
                _builder.append("___");
                State _target_4 = transition.getTarget();
                String _name_23 = _target_4.getName();
                _builder.append(_name_23, "\t\t");
                _builder.append("_");
                String _name_24 = transition.getName();
                _builder.append(_name_24, "\t\t");
                _builder.append("_");
                Guard _guard_5 = transition.getGuard();
                String _name_25 = _guard_5.getName();
                _builder.append(_name_25, "\t\t");
                _builder.append("_guard;");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
              }
            }
          }
        }
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileStateMachine(final StateMachine e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    EObject _eContainer = e.eContainer();
    QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer);
    _builder.append(_fullyQualifiedName, "");
    _builder.append(".");
    String _name = e.getName();
    String _lowerCase = _name.toLowerCase();
    _builder.append(_lowerCase, "");
    _builder.append(".configuration;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import org.salgar.statemachine.domain.ControlObject;");
    _builder.newLine();
    _builder.append("import ");
    EObject _eContainer_1 = e.eContainer();
    QualifiedName _fullyQualifiedName_1 = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer_1);
    _builder.append(_fullyQualifiedName_1, "");
    _builder.append(".");
    String _name_1 = e.getName();
    String _lowerCase_1 = _name_1.toLowerCase();
    _builder.append(_lowerCase_1, "");
    _builder.append(".controlobject.Abstract");
    String _name_2 = e.getName();
    _builder.append(_name_2, "");
    _builder.append("ControlObject;");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    EObject _eContainer_2 = e.eContainer();
    QualifiedName _fullyQualifiedName_2 = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer_2);
    _builder.append(_fullyQualifiedName_2, "");
    _builder.append(".");
    String _name_3 = e.getName();
    String _lowerCase_2 = _name_3.toLowerCase();
    _builder.append(_lowerCase_2, "");
    _builder.append(".enumeration.event.");
    String _name_4 = e.getName();
    _builder.append(_name_4, "");
    _builder.append("_EventEnumerationImpl;");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    EObject _eContainer_3 = e.eContainer();
    QualifiedName _fullyQualifiedName_3 = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer_3);
    _builder.append(_fullyQualifiedName_3, "");
    _builder.append(".");
    String _name_5 = e.getName();
    String _lowerCase_3 = _name_5.toLowerCase();
    _builder.append(_lowerCase_3, "");
    _builder.append(".enumeration.state.");
    String _name_6 = e.getName();
    _builder.append(_name_6, "");
    _builder.append("_StateEnumerationImpl;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import org.springframework.beans.factory.annotation.Autowired;");
    _builder.newLine();
    _builder.append("import org.springframework.context.annotation.Configuration;");
    _builder.newLine();
    _builder.append("import org.springframework.context.annotation.Bean;");
    _builder.newLine();
    _builder.append("import org.springframework.messaging.Message;");
    _builder.newLine();
    _builder.append("import org.springframework.statemachine.config.EnableStateMachineFactory;");
    _builder.newLine();
    _builder.append("import org.springframework.statemachine.config.EnumStateMachineConfigurerAdapter;");
    _builder.newLine();
    _builder.append("import org.springframework.statemachine.config.builders.StateMachineConfigurationConfigurer;");
    _builder.newLine();
    _builder.append("import org.springframework.statemachine.config.builders.StateMachineTransitionConfigurer;");
    _builder.newLine();
    _builder.append("import org.springframework.statemachine.config.builders.StateMachineStateConfigurer;");
    _builder.newLine();
    _builder.append("import org.springframework.statemachine.StateContext;");
    _builder.newLine();
    _builder.append("import org.springframework.statemachine.action.Action;");
    _builder.newLine();
    _builder.append("import org.springframework.statemachine.listener.StateMachineListener;");
    _builder.newLine();
    _builder.append("import org.springframework.statemachine.listener.StateMachineListenerAdapter;");
    _builder.newLine();
    _builder.append("import org.springframework.statemachine.state.State;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.EnumSet;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.apache.log4j.Logger;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Configuration");
    _builder.newLine();
    _builder.append("@EnableStateMachineFactory(name = \"");
    String _name_7 = e.getName();
    _builder.append(_name_7, "");
    _builder.append("\")");
    _builder.newLineIfNotEmpty();
    _builder.append("public class ");
    String _name_8 = e.getName();
    _builder.append(_name_8, "");
    _builder.append("Configuration extends");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("EnumStateMachineConfigurerAdapter<");
    String _name_9 = e.getName();
    _builder.append(_name_9, "\t");
    _builder.append("_StateEnumerationImpl, ");
    String _name_10 = e.getName();
    _builder.append(_name_10, "\t");
    _builder.append("_EventEnumerationImpl> {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private static final Logger LOG = Logger.getLogger(");
    String _name_11 = e.getName();
    _builder.append(_name_11, "\t");
    _builder.append("Configuration.class);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Autowired");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ");
    String _name_12 = e.getName();
    _builder.append(_name_12, "\t");
    _builder.append("ActionContainer ");
    String _name_13 = e.getName();
    String _uncapitalize = WordUtils.uncapitalize(_name_13);
    _builder.append(_uncapitalize, "\t");
    _builder.append("ActionContainer;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Autowired");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ");
    String _name_14 = e.getName();
    _builder.append(_name_14, "\t");
    _builder.append("GuardContainer ");
    String _name_15 = e.getName();
    String _uncapitalize_1 = WordUtils.uncapitalize(_name_15);
    _builder.append(_uncapitalize_1, "\t");
    _builder.append("GuardContainer;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Autowired");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ");
    String _name_16 = e.getName();
    _builder.append(_name_16, "\t");
    _builder.append("ControlObjectLocator controlObjectLocator;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void configure(");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("StateMachineConfigurationConfigurer<");
    String _name_17 = e.getName();
    _builder.append(_name_17, "\t\t");
    _builder.append("_StateEnumerationImpl, ");
    String _name_18 = e.getName();
    _builder.append(_name_18, "\t\t");
    _builder.append("_EventEnumerationImpl> config)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("throws Exception {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("config.withConfiguration().listener(listener());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void configure(");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("StateMachineStateConfigurer<");
    String _name_19 = e.getName();
    _builder.append(_name_19, "\t\t");
    _builder.append("_StateEnumerationImpl, ");
    String _name_20 = e.getName();
    _builder.append(_name_20, "\t\t");
    _builder.append("_EventEnumerationImpl> states)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("throws Exception {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("states.withStates()");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append(".initial(");
    String _name_21 = e.getName();
    _builder.append(_name_21, "\t\t\t");
    _builder.append("_StateEnumerationImpl.");
    State _initialState = e.getInitialState();
    String _name_22 = _initialState.getName();
    _builder.append(_name_22, "\t\t\t");
    _builder.append(",");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("initialState");
    String _name_23 = e.getName();
    _builder.append(_name_23, "\t\t\t\t\t");
    _builder.append("Action())");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append(".states(EnumSet.allOf(");
    String _name_24 = e.getName();
    _builder.append(_name_24, "\t\t\t");
    _builder.append("_StateEnumerationImpl.class));");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("public void configure(");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("StateMachineTransitionConfigurer<");
    String _name_25 = e.getName();
    _builder.append(_name_25, "\t\t");
    _builder.append("_StateEnumerationImpl, ");
    String _name_26 = e.getName();
    _builder.append(_name_26, "\t\t");
    _builder.append("_EventEnumerationImpl> transitions)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("throws Exception {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("transitions");
    _builder.newLine();
    {
      EList<State> _states = e.getStates();
      boolean _hasElements = false;
      for(final State state : _states) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(".and()", "\t\t");
        }
        _builder.append("\t\t");
        _builder.append("//STATE - ");
        String _name_27 = state.getName();
        _builder.append(_name_27, "\t\t");
        _builder.newLineIfNotEmpty();
        {
          EList<Transition> _transitions = state.getTransitions();
          boolean _hasElements_1 = false;
          for(final Transition transition : _transitions) {
            if (!_hasElements_1) {
              _hasElements_1 = true;
            } else {
              _builder.appendImmediate(".and()", "\t\t");
            }
            _builder.append("\t\t");
            _builder.append("//TRANSITION - ");
            String _name_28 = transition.getName();
            _builder.append(_name_28, "\t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append(".withExternal().source(");
            String _name_29 = e.getName();
            _builder.append(_name_29, "\t\t");
            _builder.append("_StateEnumerationImpl.");
            String _name_30 = state.getName();
            _builder.append(_name_30, "\t\t");
            _builder.append(")");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append(".target(");
            String _name_31 = e.getName();
            _builder.append(_name_31, "\t\t");
            _builder.append("_StateEnumerationImpl.");
            State _target = transition.getTarget();
            String _name_32 = _target.getName();
            _builder.append(_name_32, "\t\t");
            _builder.append(")");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append(".event(");
            String _name_33 = e.getName();
            _builder.append(_name_33, "\t\t");
            _builder.append("_EventEnumerationImpl.");
            Event _trigger = transition.getTrigger();
            String _name_34 = _trigger.getName();
            _builder.append(_name_34, "\t\t");
            _builder.append(")");
            _builder.newLineIfNotEmpty();
            {
              Guard _guard = transition.getGuard();
              boolean _notEquals = (!Objects.equal(_guard, null));
              if (_notEquals) {
                _builder.append("\t\t");
                _builder.append(".guard(");
                String _name_35 = e.getName();
                String _uncapitalize_2 = WordUtils.uncapitalize(_name_35);
                _builder.append(_uncapitalize_2, "\t\t");
                _builder.append("GuardContainer");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append(".get");
                String _name_36 = state.getName();
                _builder.append(_name_36, "\t\t");
                _builder.append("___");
                State _target_1 = transition.getTarget();
                String _name_37 = _target_1.getName();
                _builder.append(_name_37, "\t\t");
                _builder.append("_");
                String _name_38 = transition.getName();
                _builder.append(_name_38, "\t\t");
                _builder.append("_");
                Guard _guard_1 = transition.getGuard();
                String _name_39 = _guard_1.getName();
                _builder.append(_name_39, "\t\t");
                _builder.append("_guard()");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append(".");
                String _name_40 = state.getName();
                _builder.append(_name_40, "\t\t");
                _builder.append("_");
                State _target_2 = transition.getTarget();
                String _name_41 = _target_2.getName();
                _builder.append(_name_41, "\t\t");
                _builder.append("_");
                String _name_42 = transition.getName();
                _builder.append(_name_42, "\t\t");
                _builder.append("_");
                Guard _guard_2 = transition.getGuard();
                String _name_43 = _guard_2.getName();
                _builder.append(_name_43, "\t\t");
                _builder.append("_guard())");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              Action _action = transition.getAction();
              boolean _notEquals_1 = (!Objects.equal(_action, null));
              if (_notEquals_1) {
                _builder.append("\t\t");
                _builder.append(".action(");
                String _name_44 = e.getName();
                String _uncapitalize_3 = WordUtils.uncapitalize(_name_44);
                _builder.append(_uncapitalize_3, "\t\t");
                _builder.append("ActionContainer");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append(".get");
                String _name_45 = state.getName();
                _builder.append(_name_45, "\t\t");
                _builder.append("___");
                State _target_3 = transition.getTarget();
                String _name_46 = _target_3.getName();
                _builder.append(_name_46, "\t\t");
                _builder.append("_");
                String _name_47 = transition.getName();
                _builder.append(_name_47, "\t\t");
                _builder.append("_");
                Action _action_1 = transition.getAction();
                String _name_48 = _action_1.getName();
                _builder.append(_name_48, "\t\t");
                _builder.append("_action()");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append(".");
                String _name_49 = state.getName();
                _builder.append(_name_49, "\t\t");
                _builder.append("_");
                State _target_4 = transition.getTarget();
                String _name_50 = _target_4.getName();
                _builder.append(_name_50, "\t\t");
                _builder.append("_");
                String _name_51 = transition.getName();
                _builder.append(_name_51, "\t\t");
                _builder.append("_");
                Action _action_2 = transition.getAction();
                String _name_52 = _action_2.getName();
                _builder.append(_name_52, "\t\t");
                _builder.append("_action())");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder.append("\t\t\t\t");
      }
    }
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public StateMachineListener<");
    String _name_53 = e.getName();
    _builder.append(_name_53, "\t");
    _builder.append("_StateEnumerationImpl, ");
    String _name_54 = e.getName();
    _builder.append(_name_54, "\t");
    _builder.append("_EventEnumerationImpl> listener() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return new StateMachineListenerAdapter<");
    String _name_55 = e.getName();
    _builder.append(_name_55, "\t\t");
    _builder.append("_StateEnumerationImpl, ");
    String _name_56 = e.getName();
    _builder.append(_name_56, "\t\t");
    _builder.append("_EventEnumerationImpl>() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("public void stateChanged(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("State<");
    String _name_57 = e.getName();
    _builder.append(_name_57, "\t\t\t\t\t");
    _builder.append("_StateEnumerationImpl, ");
    String _name_58 = e.getName();
    _builder.append(_name_58, "\t\t\t\t\t");
    _builder.append("_EventEnumerationImpl> from,");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("State<");
    String _name_59 = e.getName();
    _builder.append(_name_59, "\t\t\t\t\t");
    _builder.append("_StateEnumerationImpl, ");
    String _name_60 = e.getName();
    _builder.append(_name_60, "\t\t\t\t\t");
    _builder.append("_EventEnumerationImpl> to) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("LOG.info(\"State change to \" + to.getId());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("public void eventNotAccepted(Message<");
    String _name_61 = e.getName();
    _builder.append(_name_61, "\t\t\t");
    _builder.append("_EventEnumerationImpl> event) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("LOG.warn(\"The event \" + event.toString() + \" is not accepted!\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Bean");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Action<");
    String _name_62 = e.getName();
    _builder.append(_name_62, "\t");
    _builder.append("_StateEnumerationImpl, ");
    String _name_63 = e.getName();
    _builder.append(_name_63, "\t");
    _builder.append("_EventEnumerationImpl> initialState");
    String _name_64 = e.getName();
    _builder.append(_name_64, "\t");
    _builder.append("Action() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return new Action<");
    String _name_65 = e.getName();
    _builder.append(_name_65, "\t\t");
    _builder.append("_StateEnumerationImpl, ");
    String _name_66 = e.getName();
    _builder.append(_name_66, "\t\t");
    _builder.append("_EventEnumerationImpl>() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("public void execute(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("StateContext<");
    String _name_67 = e.getName();
    _builder.append(_name_67, "\t\t\t\t\t");
    _builder.append("_StateEnumerationImpl, ");
    String _name_68 = e.getName();
    _builder.append(_name_68, "\t\t\t\t\t");
    _builder.append("_EventEnumerationImpl> context) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("Abstract");
    String _name_69 = e.getName();
    _builder.append(_name_69, "\t\t\t\t");
    _builder.append("ControlObject controlObject = controlObjectLocator.getControlObject();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("((ControlObject) controlObject).resetStateMachine();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("context.getExtendedState().getVariables().put(\"");
    String _name_70 = e.getName();
    _builder.append(_name_70, "\t\t\t\t");
    _builder.append("ControlObject\", controlObject);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
